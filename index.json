[{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs.html","title":"FSharp.Formatting.ApiDocs","content":"ApiDocAttribute \nApiDocCollection \nApiDocComment \nApiDocEntity \nApiDocEntityInfo \nApiDocFileExtensions \nApiDocHtml \nApiDocInput \nApiDocMember \nApiDocMemberDetails \nApiDocMemberKind \nApiDocModel \nApiDocNamespace \nApiDocType \nApiDocs \nApiDocsSearchIndexEntry \nAttribute \nDocComment \nMember \nMemberKind \nModule \nModuleInfo \nType \nTypeInfo"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat.html","title":"FSharp.Formatting.CSharpFormat","content":"CLikeFormat \nCPlusPlusFormat \nCSharpFormat \nCodeFormat \nFSharpFormat \nHaskellFormat \nHtmlFormat \nJavaScriptFormat \nMshFormat \nPaketFormat \nPhpFormat \nSourceFormat \nSyntaxHighlighter \nTsqlFormat \nTypeScriptFormat \nVisualBasicFormat"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat.html","title":"FSharp.Formatting.CodeFormat","content":"CodeFormat \nCodeFormatAgent \nErrorKind \nFormattedContent \nFormattedSnippet \nLine \nSnippet \nSourceError \nTokenKind \nTokenSpan \nTokenSpans \nToolTipSpan \nToolTipSpans"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate.html","title":"FSharp.Formatting.Literate","content":"MarkdownPatterns \nLiterate \nLiterateCodeOptions \nLiterateCodeVisibility \nLiterateDocument \nLiterateParagraph \nLiterateParagraphOptions \nLiterateSource \nOutputKind"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation.html","title":"FSharp.Formatting.Literate.Evaluation","content":"FsiEmbedKind \nFsiEvaluationFailedInfo \nFsiEvaluationResult \nFsiEvaluator \nFsiEvaluatorConfig \nIFsiEvaluationResult \nIFsiEvaluator"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown.html","title":"FSharp.Formatting.Markdown","content":"Dsl \nHtmlFormatting \nMarkdownPatterns \nMarkdown \nMarkdownColumnAlignment \nMarkdownDocument \nMarkdownEmbedParagraphs \nMarkdownEmbedSpans \nMarkdownListKind \nMarkdownParagraph \nMarkdownParagraphs \nMarkdownParseOptions \nMarkdownSpan \nMarkdownSpans \nMarkdownTableRow \nMarkdownRange \nMarkdownRange"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating.html","title":"FSharp.Formatting.Templating","content":"ParamKeys \nParamKey \nSubstitutions"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocattribute.html","title":"ApiDocAttribute","content":"ApiDocAttribute \n\n Represents a custom attribute attached to source code\n \nApiDocAttribute.( .ctor ) \n( .ctor ) \nApiDocAttribute.Format \nFormat \nApiDocAttribute.FormatFullName \nFormatFullName \nApiDocAttribute.FormatFullNameLongForm \nFormatFullNameLongForm \nApiDocAttribute.FormatLongForm \nFormatLongForm \nApiDocAttribute.ConstructorArguments \nConstructorArguments \nApiDocAttribute.IsRequireQualifiedAccessAttribute \nIsRequireQualifiedAccessAttribute \nApiDocAttribute.NamedConstructorArguments \nNamedConstructorArguments \nApiDocAttribute.FullName \nFullName \nApiDocAttribute.IsObsoleteAttribute \nIsObsoleteAttribute \nApiDocAttribute.CustomOperationName \nCustomOperationName \nApiDocAttribute.IsCustomOperationAttribute \nIsCustomOperationAttribute \nApiDocAttribute.Name \nName \nApiDocAttribute.ObsoleteMessage \nObsoleteMessage"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocattribute.html#( .ctor )","title":"ApiDocAttribute.( .ctor )","content":"ApiDocAttribute.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocattribute.html#Format","title":"ApiDocAttribute.Format","content":"ApiDocAttribute.Format \nFormat \n\n Formats the attribute using the Name. Removes the \u0022Attribute\u0022-suffix. E.g Obsolete\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocattribute.html#FormatFullName","title":"ApiDocAttribute.FormatFullName","content":"ApiDocAttribute.FormatFullName \nFormatFullName \n\n Formats the attribute using the FullName. Removes the \u0022Attribute\u0022-suffix. E.g System.Obsolete\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocattribute.html#FormatFullNameLongForm","title":"ApiDocAttribute.FormatFullNameLongForm","content":"ApiDocAttribute.FormatFullNameLongForm \nFormatFullNameLongForm \n\n Formats the attribute using the FullName. Keeps the \u0022Attribute\u0022-suffix. E.g System.ObsoleteAttribute\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocattribute.html#FormatLongForm","title":"ApiDocAttribute.FormatLongForm","content":"ApiDocAttribute.FormatLongForm \nFormatLongForm \n\n Formats the attribute using the Name. Keeps the \u0022Attribute\u0022-suffix. E.g ObsoleteAttribute\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocattribute.html#ConstructorArguments","title":"ApiDocAttribute.ConstructorArguments","content":"ApiDocAttribute.ConstructorArguments \nConstructorArguments \n\n The arguments to the constructor for the attribute\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocattribute.html#IsRequireQualifiedAccessAttribute","title":"ApiDocAttribute.IsRequireQualifiedAccessAttribute","content":"ApiDocAttribute.IsRequireQualifiedAccessAttribute \nIsRequireQualifiedAccessAttribute \n\n Gets a value indicating whether this attribute is RequireQualifiedAccessAttribute\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocattribute.html#NamedConstructorArguments","title":"ApiDocAttribute.NamedConstructorArguments","content":"ApiDocAttribute.NamedConstructorArguments \nNamedConstructorArguments \n\n The named arguments for the attribute\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocattribute.html#FullName","title":"ApiDocAttribute.FullName","content":"ApiDocAttribute.FullName \nFullName \n\n The qualified name of the attribute\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocattribute.html#IsObsoleteAttribute","title":"ApiDocAttribute.IsObsoleteAttribute","content":"ApiDocAttribute.IsObsoleteAttribute \nIsObsoleteAttribute \n\n Gets a value indicating whether this attribute is System.ObsoleteAttribute\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocattribute.html#CustomOperationName","title":"ApiDocAttribute.CustomOperationName","content":"ApiDocAttribute.CustomOperationName \nCustomOperationName \n\n Returns the custom operation name, when this attribute is the CustomOperationAttribute. When its not an empty string is returned\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocattribute.html#IsCustomOperationAttribute","title":"ApiDocAttribute.IsCustomOperationAttribute","content":"ApiDocAttribute.IsCustomOperationAttribute \nIsCustomOperationAttribute \n\n Gets a value indicating whether this attribute the CustomOperationAttribute\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocattribute.html#Name","title":"ApiDocAttribute.Name","content":"ApiDocAttribute.Name \nName \n\n The name of the attribute\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocattribute.html#ObsoleteMessage","title":"ApiDocAttribute.ObsoleteMessage","content":"ApiDocAttribute.ObsoleteMessage \nObsoleteMessage \n\n Returns the obsolete message, when this attribute is the System.ObsoleteAttribute. When its not or no message was specified, an empty string is returned\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidoccollection.html","title":"ApiDocCollection","content":"ApiDocCollection \n\n Represents a group of assemblies integrated with its associated documentation\n \nApiDocCollection.( .ctor ) \n( .ctor ) \nApiDocCollection.Assemblies \nAssemblies \nApiDocCollection.CollectionName \nCollectionName \nApiDocCollection.Namespaces \nNamespaces"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidoccollection.html#( .ctor )","title":"ApiDocCollection.( .ctor )","content":"ApiDocCollection.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidoccollection.html#Assemblies","title":"ApiDocCollection.Assemblies","content":"ApiDocCollection.Assemblies \nAssemblies \n\n All assemblies in the collection\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidoccollection.html#CollectionName","title":"ApiDocCollection.CollectionName","content":"ApiDocCollection.CollectionName \nCollectionName \n\n Name of the collection\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidoccollection.html#Namespaces","title":"ApiDocCollection.Namespaces","content":"ApiDocCollection.Namespaces \nNamespaces \n\n All namespaces in the collection\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidoccomment.html","title":"ApiDocComment","content":"ApiDocComment \n\n Represents a documentation comment attached to source code\n \nApiDocComment.( .ctor ) \n( .ctor ) \nApiDocComment.Summary \nSummary \nApiDocComment.Exceptions \nExceptions \nApiDocComment.Notes \nNotes \nApiDocComment.Examples \nExamples \nApiDocComment.RawData \nRawData \nApiDocComment.Remarks \nRemarks \nApiDocComment.Parameters \nParameters \nApiDocComment.Returns \nReturns"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidoccomment.html#( .ctor )","title":"ApiDocComment.( .ctor )","content":"ApiDocComment.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidoccomment.html#Summary","title":"ApiDocComment.Summary","content":"ApiDocComment.Summary \nSummary \n\n The summary for the comment\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidoccomment.html#Exceptions","title":"ApiDocComment.Exceptions","content":"ApiDocComment.Exceptions \nExceptions \n\n The notes sections of the comment\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidoccomment.html#Notes","title":"ApiDocComment.Notes","content":"ApiDocComment.Notes \nNotes \n\n The notes sections of the comment\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidoccomment.html#Examples","title":"ApiDocComment.Examples","content":"ApiDocComment.Examples \nExamples \n\n The examples sections of the comment\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidoccomment.html#RawData","title":"ApiDocComment.RawData","content":"ApiDocComment.RawData \nRawData \n\n The raw data of the comment\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidoccomment.html#Remarks","title":"ApiDocComment.Remarks","content":"ApiDocComment.Remarks \nRemarks \n\n The remarks html for comment\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidoccomment.html#Parameters","title":"ApiDocComment.Parameters","content":"ApiDocComment.Parameters \nParameters \n\n The param sections of the comment\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidoccomment.html#Returns","title":"ApiDocComment.Returns","content":"ApiDocComment.Returns \nReturns \n\n The return sections of the comment\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html","title":"ApiDocEntity","content":"ApiDocEntity \n\n Represents a type definition integrated with its associated documentation\n \nApiDocEntity.( .ctor ) \n( .ctor ) \nApiDocEntity.OutputFile \nOutputFile \nApiDocEntity.Url \nUrl \nApiDocEntity.BaseType \nBaseType \nApiDocEntity.InstanceMembers \nInstanceMembers \nApiDocEntity.CategoryIndex \nCategoryIndex \nApiDocEntity.Constructors \nConstructors \nApiDocEntity.Substitutions \nSubstitutions \nApiDocEntity.Attributes \nAttributes \nApiDocEntity.AllMembers \nAllMembers \nApiDocEntity.DelegateSignature \nDelegateSignature \nApiDocEntity.Category \nCategory \nApiDocEntity.Comment \nComment \nApiDocEntity.AllInterfaces \nAllInterfaces \nApiDocEntity.NestedEntities \nNestedEntities \nApiDocEntity.Exclude \nExclude \nApiDocEntity.RecordFields \nRecordFields \nApiDocEntity.RequiresQualifiedAccess \nRequiresQualifiedAccess \nApiDocEntity.ObsoleteMessage \nObsoleteMessage \nApiDocEntity.SourceLocation \nSourceLocation \nApiDocEntity.StaticMembers \nStaticMembers \nApiDocEntity.IsTypeDefinition \nIsTypeDefinition \nApiDocEntity.ActivePatterns \nActivePatterns \nApiDocEntity.Name \nName \nApiDocEntity.Assembly \nAssembly \nApiDocEntity.ValuesAndFuncs \nValuesAndFuncs \nApiDocEntity.IsObsolete \nIsObsolete \nApiDocEntity.AbbreviatedType \nAbbreviatedType \nApiDocEntity.UrlBaseName \nUrlBaseName \nApiDocEntity.TypeExtensions \nTypeExtensions \nApiDocEntity.StaticParameters \nStaticParameters \nApiDocEntity.Symbol \nSymbol \nApiDocEntity.UnionCases \nUnionCases \nApiDocEntity.GetUrl \nGetUrl"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#( .ctor )","title":"ApiDocEntity.( .ctor )","content":"ApiDocEntity.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#OutputFile","title":"ApiDocEntity.OutputFile","content":"ApiDocEntity.OutputFile \nOutputFile \n\n The name of the file generated for this entity\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#Url","title":"ApiDocEntity.Url","content":"ApiDocEntity.Url \nUrl \n\n The URL of the best link for the entity relative to \u0022reference\u0022 directory (without the http://site.io/reference)\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#BaseType","title":"ApiDocEntity.BaseType","content":"ApiDocEntity.BaseType \nBaseType \n\n The base type of the type, formatted\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#InstanceMembers","title":"ApiDocEntity.InstanceMembers","content":"ApiDocEntity.InstanceMembers \nInstanceMembers \n\n The instance members of the type\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#CategoryIndex","title":"ApiDocEntity.CategoryIndex","content":"ApiDocEntity.CategoryIndex \nCategoryIndex \n\n The category index of the type\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#Constructors","title":"ApiDocEntity.Constructors","content":"ApiDocEntity.Constructors \nConstructors \n\n The constuctorsof the type\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#Substitutions","title":"ApiDocEntity.Substitutions","content":"ApiDocEntity.Substitutions \nSubstitutions \n\n The substitution parameters active for generating thist content\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#Attributes","title":"ApiDocEntity.Attributes","content":"ApiDocEntity.Attributes \nAttributes \n\n The declared attributes of the type\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#AllMembers","title":"ApiDocEntity.AllMembers","content":"ApiDocEntity.AllMembers \nAllMembers \n\n All members of the type\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#DelegateSignature","title":"ApiDocEntity.DelegateSignature","content":"ApiDocEntity.DelegateSignature \nDelegateSignature \n\n If this is a delegate, then e formatted signature\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#Category","title":"ApiDocEntity.Category","content":"ApiDocEntity.Category \nCategory \n\n The category of the type\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#Comment","title":"ApiDocEntity.Comment","content":"ApiDocEntity.Comment \nComment \n\n The attached comment\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#AllInterfaces","title":"ApiDocEntity.AllInterfaces","content":"ApiDocEntity.AllInterfaces \nAllInterfaces \n\n All interfaces of the type, formatted\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#NestedEntities","title":"ApiDocEntity.NestedEntities","content":"ApiDocEntity.NestedEntities \nNestedEntities \n\n All nested modules and types\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#Exclude","title":"ApiDocEntity.Exclude","content":"ApiDocEntity.Exclude \nExclude \n\n The exclude flag\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#RecordFields","title":"ApiDocEntity.RecordFields","content":"ApiDocEntity.RecordFields \nRecordFields \n\n The fields of a record type\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#RequiresQualifiedAccess","title":"ApiDocEntity.RequiresQualifiedAccess","content":"ApiDocEntity.RequiresQualifiedAccess \nRequiresQualifiedAccess \n\n Does the module have the RequiresQualifiedAccess attribute\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#ObsoleteMessage","title":"ApiDocEntity.ObsoleteMessage","content":"ApiDocEntity.ObsoleteMessage \nObsoleteMessage \n\n Returns the obsolete message, when this member is obsolete. When its not or no message was specified, an empty string is returned\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#SourceLocation","title":"ApiDocEntity.SourceLocation","content":"ApiDocEntity.SourceLocation \nSourceLocation \n\n The URL of the member\u0027s source location, if any\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#StaticMembers","title":"ApiDocEntity.StaticMembers","content":"ApiDocEntity.StaticMembers \nStaticMembers \n\n The static members of the type\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#IsTypeDefinition","title":"ApiDocEntity.IsTypeDefinition","content":"ApiDocEntity.IsTypeDefinition \nIsTypeDefinition \n\n Indicates if the entity is a type definition\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#ActivePatterns","title":"ApiDocEntity.ActivePatterns","content":"ApiDocEntity.ActivePatterns \nActivePatterns \n\n Active patterns of the module\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#Name","title":"ApiDocEntity.Name","content":"ApiDocEntity.Name \nName \n\n The name of the entity\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#Assembly","title":"ApiDocEntity.Assembly","content":"ApiDocEntity.Assembly \nAssembly \n\n The name of the type\u0027s assembly\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#ValuesAndFuncs","title":"ApiDocEntity.ValuesAndFuncs","content":"ApiDocEntity.ValuesAndFuncs \nValuesAndFuncs \n\n Values and functions of the module\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#IsObsolete","title":"ApiDocEntity.IsObsolete","content":"ApiDocEntity.IsObsolete \nIsObsolete \n\n Gets a value indicating whether this member is obsolete\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#AbbreviatedType","title":"ApiDocEntity.AbbreviatedType","content":"ApiDocEntity.AbbreviatedType \nAbbreviatedType \n\n If this is a type abbreviation, then the abbreviated type\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#UrlBaseName","title":"ApiDocEntity.UrlBaseName","content":"ApiDocEntity.UrlBaseName \nUrlBaseName \n\n The URL base name of the primary documentation for the entity  (without the http://site.io/reference)\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#TypeExtensions","title":"ApiDocEntity.TypeExtensions","content":"ApiDocEntity.TypeExtensions \nTypeExtensions \n\n Type extensions of the module\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#StaticParameters","title":"ApiDocEntity.StaticParameters","content":"ApiDocEntity.StaticParameters \nStaticParameters \n\n Static parameters\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#Symbol","title":"ApiDocEntity.Symbol","content":"ApiDocEntity.Symbol \nSymbol \n\n The F# compiler symbol for the type definition\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#UnionCases","title":"ApiDocEntity.UnionCases","content":"ApiDocEntity.UnionCases \nUnionCases \n\n The cases of a union type\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentity.html#GetUrl","title":"ApiDocEntity.GetUrl","content":"ApiDocEntity.GetUrl \nGetUrl \n\n Compute the URL of the best link for the entity relative to \u0022reference\u0022 directory (without the http://site.io/reference)\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentityinfo.html","title":"ApiDocEntityInfo","content":"ApiDocEntityInfo \n\n High-level information about a module definition\n \nApiDocEntityInfo.( .ctor ) \n( .ctor ) \nApiDocEntityInfo.Entity \nEntity \nApiDocEntityInfo.ParentModule \nParentModule \nApiDocEntityInfo.Collection \nCollection \nApiDocEntityInfo.Namespace \nNamespace"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentityinfo.html#( .ctor )","title":"ApiDocEntityInfo.( .ctor )","content":"ApiDocEntityInfo.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentityinfo.html#Entity","title":"ApiDocEntityInfo.Entity","content":"ApiDocEntityInfo.Entity \nEntity \n\n The actual entity\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentityinfo.html#ParentModule","title":"ApiDocEntityInfo.ParentModule","content":"ApiDocEntityInfo.ParentModule \nParentModule \n\n The parent module, if any.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentityinfo.html#Collection","title":"ApiDocEntityInfo.Collection","content":"ApiDocEntityInfo.Collection \nCollection \n\n The collection of assemblies the entity belongs to\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocentityinfo.html#Namespace","title":"ApiDocEntityInfo.Namespace","content":"ApiDocEntityInfo.Namespace \nNamespace \n\n The namespace the entity belongs to\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocfileextensions.html","title":"ApiDocFileExtensions","content":"ApiDocFileExtensions \n \nApiDocFileExtensions.InFile \nInFile \nApiDocFileExtensions.InUrl \nInUrl"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocfileextensions.html#InFile","title":"ApiDocFileExtensions.InFile","content":"ApiDocFileExtensions.InFile \nInFile \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocfileextensions.html#InUrl","title":"ApiDocFileExtensions.InUrl","content":"ApiDocFileExtensions.InUrl \nInUrl \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidochtml.html","title":"ApiDocHtml","content":"ApiDocHtml \n\n Represents some HTML formatted by model generation\n \nApiDocHtml.( .ctor ) \n( .ctor ) \nApiDocHtml.HtmlText \nHtmlText"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidochtml.html#( .ctor )","title":"ApiDocHtml.( .ctor )","content":"ApiDocHtml.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidochtml.html#HtmlText","title":"ApiDocHtml.HtmlText","content":"ApiDocHtml.HtmlText \nHtmlText \n\n Get the HTML text of the HTML section\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocinput.html","title":"ApiDocInput","content":"ApiDocInput \n\n Represents an input assembly for API doc generation\n \nApiDocInput.FromFile \nFromFile \nApiDocInput.Path \nPath \nApiDocInput.XmlFile \nXmlFile \nApiDocInput.SourceFolder \nSourceFolder \nApiDocInput.SourceRepo \nSourceRepo \nApiDocInput.Substitutions \nSubstitutions \nApiDocInput.MarkdownComments \nMarkdownComments \nApiDocInput.Warn \nWarn \nApiDocInput.PublicOnly \nPublicOnly"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocinput.html#FromFile","title":"ApiDocInput.FromFile","content":"ApiDocInput.FromFile \nFromFile \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocinput.html#Path","title":"ApiDocInput.Path","content":"ApiDocInput.Path \nPath \n\n The path to the assembly\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocinput.html#XmlFile","title":"ApiDocInput.XmlFile","content":"ApiDocInput.XmlFile \nXmlFile \n\n Override the default XML file (normally assumed to live alongside)\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocinput.html#SourceFolder","title":"ApiDocInput.SourceFolder","content":"ApiDocInput.SourceFolder \nSourceFolder \n\n The compile-time source folder\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocinput.html#SourceRepo","title":"ApiDocInput.SourceRepo","content":"ApiDocInput.SourceRepo \nSourceRepo \n\n The URL the the source repo where the source code lives\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocinput.html#Substitutions","title":"ApiDocInput.Substitutions","content":"ApiDocInput.Substitutions \nSubstitutions \n\n The substitutionss active for this input. If specified these\n are used instead of the overall substitutions.  This allows different parameters (e.g.\n different authors) for each assembly in a collection.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocinput.html#MarkdownComments","title":"ApiDocInput.MarkdownComments","content":"ApiDocInput.MarkdownComments \nMarkdownComments \n\n Whether the input uses markdown comments\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocinput.html#Warn","title":"ApiDocInput.Warn","content":"ApiDocInput.Warn \nWarn \n\n Whether doc processing should warn on missing comments\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocinput.html#PublicOnly","title":"ApiDocInput.PublicOnly","content":"ApiDocInput.PublicOnly \nPublicOnly \n\n Whether to generate only public things\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html","title":"ApiDocMember","content":"ApiDocMember \n\n Represents an method, property, constructor, function or value, record field, union case or static parameter\n integrated with its associated documentation. Includes extension members.\n \nApiDocMember.( .ctor ) \n( .ctor ) \nApiDocMember.Url \nUrl \nApiDocMember.Attributes \nAttributes \nApiDocMember.UsageHtml \nUsageHtml \nApiDocMember.Modifiers \nModifiers \nApiDocMember.IsObsolete \nIsObsolete \nApiDocMember.ReturnInfo \nReturnInfo \nApiDocMember.FormatCompiledName \nFormatCompiledName \nApiDocMember.UrlBaseName \nUrlBaseName \nApiDocMember.IsRequireQualifiedAccessAttribute \nIsRequireQualifiedAccessAttribute \nApiDocMember.Kind \nKind \nApiDocMember.Symbol \nSymbol \nApiDocMember.TypeArguments \nTypeArguments \nApiDocMember.CompiledName \nCompiledName \nApiDocMember.FormatTypeArguments \nFormatTypeArguments \nApiDocMember.Comment \nComment \nApiDocMember.Details \nDetails \nApiDocMember.Category \nCategory \nApiDocMember.Exclude \nExclude \nApiDocMember.FormatModifiers \nFormatModifiers \nApiDocMember.SourceLocation \nSourceLocation \nApiDocMember.ExtendedType \nExtendedType \nApiDocMember.Parameters \nParameters \nApiDocMember.CategoryIndex \nCategoryIndex \nApiDocMember.CustomOperationName \nCustomOperationName \nApiDocMember.Name \nName \nApiDocMember.ObsoleteMessage \nObsoleteMessage \nApiDocMember.GetUrl \nGetUrl"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#( .ctor )","title":"ApiDocMember.( .ctor )","content":"ApiDocMember.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#Url","title":"ApiDocMember.Url","content":"ApiDocMember.Url \nUrl \n\n The URL of the best link documentation for the item relative to \u0022reference\u0022 directory (without the http://site.io/reference)\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#Attributes","title":"ApiDocMember.Attributes","content":"ApiDocMember.Attributes \nAttributes \n\n The declared attributes of the member\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#UsageHtml","title":"ApiDocMember.UsageHtml","content":"ApiDocMember.UsageHtml \nUsageHtml \n\n The usage section in a typical tooltip\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#Modifiers","title":"ApiDocMember.Modifiers","content":"ApiDocMember.Modifiers \nModifiers \n\n The member\u0027s modifiers\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#IsObsolete","title":"ApiDocMember.IsObsolete","content":"ApiDocMember.IsObsolete \nIsObsolete \n\n Gets a value indicating whether this member is obsolete\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#ReturnInfo","title":"ApiDocMember.ReturnInfo","content":"ApiDocMember.ReturnInfo \nReturnInfo \n\n The return section in a typical tooltip\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#FormatCompiledName","title":"ApiDocMember.FormatCompiledName","content":"ApiDocMember.FormatCompiledName \nFormatCompiledName \n\n Formats the compiled name\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#UrlBaseName","title":"ApiDocMember.UrlBaseName","content":"ApiDocMember.UrlBaseName \nUrlBaseName \n\n The URL base name of the best link documentation for the item (without the http://site.io/reference)\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#IsRequireQualifiedAccessAttribute","title":"ApiDocMember.IsRequireQualifiedAccessAttribute","content":"ApiDocMember.IsRequireQualifiedAccessAttribute \nIsRequireQualifiedAccessAttribute \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#Kind","title":"ApiDocMember.Kind","content":"ApiDocMember.Kind \nKind \n\n The kind of the member\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#Symbol","title":"ApiDocMember.Symbol","content":"ApiDocMember.Symbol \nSymbol \n\n The symbol this member is related to\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#TypeArguments","title":"ApiDocMember.TypeArguments","content":"ApiDocMember.TypeArguments \nTypeArguments \n\n The member\u0027s type arguments\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#CompiledName","title":"ApiDocMember.CompiledName","content":"ApiDocMember.CompiledName \nCompiledName \n\n The member\u0027s compiled name, if any\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#FormatTypeArguments","title":"ApiDocMember.FormatTypeArguments","content":"ApiDocMember.FormatTypeArguments \nFormatTypeArguments \n\n Formats type arguments\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#Comment","title":"ApiDocMember.Comment","content":"ApiDocMember.Comment \nComment \n\n The attached comment\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#Details","title":"ApiDocMember.Details","content":"ApiDocMember.Details \nDetails \n\n The members details\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#Category","title":"ApiDocMember.Category","content":"ApiDocMember.Category \nCategory \n\n The category\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#Exclude","title":"ApiDocMember.Exclude","content":"ApiDocMember.Exclude \nExclude \n\n The exclude flag\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#FormatModifiers","title":"ApiDocMember.FormatModifiers","content":"ApiDocMember.FormatModifiers \nFormatModifiers \n\n Formats modifiers\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#SourceLocation","title":"ApiDocMember.SourceLocation","content":"ApiDocMember.SourceLocation \nSourceLocation \n\n The URL of the member\u0027s source location, if any\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#ExtendedType","title":"ApiDocMember.ExtendedType","content":"ApiDocMember.ExtendedType \nExtendedType \n\n The type extended by an extension member, if any\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#Parameters","title":"ApiDocMember.Parameters","content":"ApiDocMember.Parameters \nParameters \n\n The member\u0027s parameters and associated documentation\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#CategoryIndex","title":"ApiDocMember.CategoryIndex","content":"ApiDocMember.CategoryIndex \nCategoryIndex \n\n The category index\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#CustomOperationName","title":"ApiDocMember.CustomOperationName","content":"ApiDocMember.CustomOperationName \nCustomOperationName \n\n Returns the custom operation name, when this attribute is the CustomOperationAttribute.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#Name","title":"ApiDocMember.Name","content":"ApiDocMember.Name \nName \n\n Name of the member\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#ObsoleteMessage","title":"ApiDocMember.ObsoleteMessage","content":"ApiDocMember.ObsoleteMessage \nObsoleteMessage \n\n Returns the obsolete message, when this member is obsolete. When its not or no message was specified, an empty string is returned\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmember.html#GetUrl","title":"ApiDocMember.GetUrl","content":"ApiDocMember.GetUrl \nGetUrl \n\n The URL of the best link documentation for the item relative to \u0022reference\u0022 directory (without the http://site.io/reference)\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmemberdetails.html","title":"ApiDocMemberDetails","content":"ApiDocMemberDetails \n \nApiDocMemberDetails.ApiDocMemberDetails \nApiDocMemberDetails"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmemberdetails.html#ApiDocMemberDetails","title":"ApiDocMemberDetails.ApiDocMemberDetails","content":"ApiDocMemberDetails.ApiDocMemberDetails \nApiDocMemberDetails \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmemberkind.html","title":"ApiDocMemberKind","content":"ApiDocMemberKind \n\n Represents the kind of member\n \nApiDocMemberKind.ValueOrFunction \nValueOrFunction \nApiDocMemberKind.TypeExtension \nTypeExtension \nApiDocMemberKind.ActivePattern \nActivePattern \nApiDocMemberKind.Constructor \nConstructor \nApiDocMemberKind.InstanceMember \nInstanceMember \nApiDocMemberKind.StaticMember \nStaticMember \nApiDocMemberKind.UnionCase \nUnionCase \nApiDocMemberKind.RecordField \nRecordField \nApiDocMemberKind.StaticParameter \nStaticParameter"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmemberkind.html#ValueOrFunction","title":"ApiDocMemberKind.ValueOrFunction","content":"ApiDocMemberKind.ValueOrFunction \nValueOrFunction \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmemberkind.html#TypeExtension","title":"ApiDocMemberKind.TypeExtension","content":"ApiDocMemberKind.TypeExtension \nTypeExtension \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmemberkind.html#ActivePattern","title":"ApiDocMemberKind.ActivePattern","content":"ApiDocMemberKind.ActivePattern \nActivePattern \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmemberkind.html#Constructor","title":"ApiDocMemberKind.Constructor","content":"ApiDocMemberKind.Constructor \nConstructor \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmemberkind.html#InstanceMember","title":"ApiDocMemberKind.InstanceMember","content":"ApiDocMemberKind.InstanceMember \nInstanceMember \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmemberkind.html#StaticMember","title":"ApiDocMemberKind.StaticMember","content":"ApiDocMemberKind.StaticMember \nStaticMember \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmemberkind.html#UnionCase","title":"ApiDocMemberKind.UnionCase","content":"ApiDocMemberKind.UnionCase \nUnionCase \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmemberkind.html#RecordField","title":"ApiDocMemberKind.RecordField","content":"ApiDocMemberKind.RecordField \nRecordField \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmemberkind.html#StaticParameter","title":"ApiDocMemberKind.StaticParameter","content":"ApiDocMemberKind.StaticParameter \nStaticParameter \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmodel.html","title":"ApiDocModel","content":"ApiDocModel \n\n Represents a set of assemblies integrated with their associated documentation\n \nApiDocModel.IndexFileUrl \nIndexFileUrl \nApiDocModel.IndexOutputFile \nIndexOutputFile \nApiDocModel.Substitutions \nSubstitutions \nApiDocModel.Collection \nCollection \nApiDocModel.Root \nRoot \nApiDocModel.FileExtensions \nFileExtensions \nApiDocModel.Qualify \nQualify \nApiDocModel.EntityInfos \nEntityInfos"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmodel.html#IndexFileUrl","title":"ApiDocModel.IndexFileUrl","content":"ApiDocModel.IndexFileUrl \nIndexFileUrl \n\n URL of the \u0027index.html\u0027 for the reference documentation for the model\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmodel.html#IndexOutputFile","title":"ApiDocModel.IndexOutputFile","content":"ApiDocModel.IndexOutputFile \nIndexOutputFile \n\n URL of the \u0027index.html\u0027 for the reference documentation for the model\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmodel.html#Substitutions","title":"ApiDocModel.Substitutions","content":"ApiDocModel.Substitutions \nSubstitutions \n\n The substitutions.  Different substitutions can also be used for each specific input\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmodel.html#Collection","title":"ApiDocModel.Collection","content":"ApiDocModel.Collection \nCollection \n\n The full list of all entities\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmodel.html#Root","title":"ApiDocModel.Root","content":"ApiDocModel.Root \nRoot \n\n The root URL for the entire generation, normally \u0027/\u0027\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmodel.html#FileExtensions","title":"ApiDocModel.FileExtensions","content":"ApiDocModel.FileExtensions \nFileExtensions \n\n Specifies file extensions to use in files and URLs\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmodel.html#Qualify","title":"ApiDocModel.Qualify","content":"ApiDocModel.Qualify \nQualify \n\n Indicates if each collection is being qualified by its collection name, e.g. \u0027reference/FSharp.Core\u0027\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocmodel.html#EntityInfos","title":"ApiDocModel.EntityInfos","content":"ApiDocModel.EntityInfos \nEntityInfos \n\n The full list of all entities\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocnamespace.html","title":"ApiDocNamespace","content":"ApiDocNamespace \n\n Represents a namespace integrated with its associated documentation\n \nApiDocNamespace.( .ctor ) \n( .ctor ) \nApiDocNamespace.OutputFile \nOutputFile \nApiDocNamespace.Url \nUrl \nApiDocNamespace.UrlBaseName \nUrlBaseName \nApiDocNamespace.Substitutions \nSubstitutions \nApiDocNamespace.UrlHash \nUrlHash \nApiDocNamespace.Entities \nEntities \nApiDocNamespace.Name \nName \nApiDocNamespace.NamespaceDocs \nNamespaceDocs"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocnamespace.html#( .ctor )","title":"ApiDocNamespace.( .ctor )","content":"ApiDocNamespace.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocnamespace.html#OutputFile","title":"ApiDocNamespace.OutputFile","content":"ApiDocNamespace.OutputFile \nOutputFile \n\n The name of the file generated for this entity\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocnamespace.html#Url","title":"ApiDocNamespace.Url","content":"ApiDocNamespace.Url \nUrl \n\n The URL of the best link documentation for the item (without the http://site.io/reference)\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocnamespace.html#UrlBaseName","title":"ApiDocNamespace.UrlBaseName","content":"ApiDocNamespace.UrlBaseName \nUrlBaseName \n\n The base name for the generated file\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocnamespace.html#Substitutions","title":"ApiDocNamespace.Substitutions","content":"ApiDocNamespace.Substitutions \nSubstitutions \n\n The substitution substitutions active for generating thist content\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocnamespace.html#UrlHash","title":"ApiDocNamespace.UrlHash","content":"ApiDocNamespace.UrlHash \nUrlHash \n\n The hash label for the URL with the overall namespaces file\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocnamespace.html#Entities","title":"ApiDocNamespace.Entities","content":"ApiDocNamespace.Entities \nEntities \n\n All modules in the namespace\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocnamespace.html#Name","title":"ApiDocNamespace.Name","content":"ApiDocNamespace.Name \nName \n\n The name of the namespace\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocnamespace.html#NamespaceDocs","title":"ApiDocNamespace.NamespaceDocs","content":"ApiDocNamespace.NamespaceDocs \nNamespaceDocs \n\n The summary text for the namespace\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidoctype.html","title":"ApiDocType","content":"ApiDocType \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocs.html","title":"ApiDocs","content":"ApiDocs \n\n  This type exposes the functionality for producing documentation model from \u0060dll\u0060 files with associated \u0060xml\u0060 files\n  generated by the F# or C# compiler. To generate documentation model, use one of the overloades of the \u0060Generate\u0060 method.\n  \nApiDocs.GenerateHtml \nGenerateHtml \nApiDocs.GenerateMarkdown \nGenerateMarkdown \nApiDocs.GenerateModel \nGenerateModel \nApiDocs.SearchIndexEntriesForModel \nSearchIndexEntriesForModel"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocs.html#GenerateHtml","title":"ApiDocs.GenerateHtml","content":"ApiDocs.GenerateHtml \nGenerateHtml \n\n Generates default HTML pages for the assemblies specified by the \u0060inputs\u0060 parameter\n "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocs.html#GenerateMarkdown","title":"ApiDocs.GenerateMarkdown","content":"ApiDocs.GenerateMarkdown \nGenerateMarkdown \n\n Generates default Markdown pages for the assemblies specified by the \u0060inputs\u0060 parameter\n "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocs.html#GenerateModel","title":"ApiDocs.GenerateModel","content":"ApiDocs.GenerateModel \nGenerateModel \n\n Generates a documentation model for the assemblies specified by the \u0060inputs\u0060 parameter\n "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocs.html#SearchIndexEntriesForModel","title":"ApiDocs.SearchIndexEntriesForModel","content":"ApiDocs.SearchIndexEntriesForModel \nSearchIndexEntriesForModel \n\n Generates the search index from the given documentation model\n "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocssearchindexentry.html","title":"ApiDocsSearchIndexEntry","content":"ApiDocsSearchIndexEntry \n\n Represents an entry suitable for constructing a Lunr index\n \nApiDocsSearchIndexEntry.uri \nuri \nApiDocsSearchIndexEntry.title \ntitle \nApiDocsSearchIndexEntry.content \ncontent"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocssearchindexentry.html#uri","title":"ApiDocsSearchIndexEntry.uri","content":"ApiDocsSearchIndexEntry.uri \nuri \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocssearchindexentry.html#title","title":"ApiDocsSearchIndexEntry.title","content":"ApiDocsSearchIndexEntry.title \ntitle \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-apidocssearchindexentry.html#content","title":"ApiDocsSearchIndexEntry.content","content":"ApiDocsSearchIndexEntry.content \ncontent \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-attribute.html","title":"Attribute","content":"Attribute \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-doccomment.html","title":"DocComment","content":"DocComment \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-member.html","title":"Member","content":"Member \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-memberkind.html","title":"MemberKind","content":"MemberKind \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-module.html","title":"Module","content":"Module \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-moduleinfo.html","title":"ModuleInfo","content":"ModuleInfo \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-type.html","title":"Type","content":"Type \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-apidocs-typeinfo.html","title":"TypeInfo","content":"TypeInfo \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-clikeformat.html","title":"CLikeFormat","content":"CLikeFormat \n\n             Provides a base class for formatting languages similar to C.\n              \nCLikeFormat..ctor \n.ctor \nCLikeFormat.CommentRegEx \nCommentRegEx \nCLikeFormat.StringRegEx \nStringRegEx"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-clikeformat.html#.ctor","title":"CLikeFormat..ctor","content":"CLikeFormat..ctor \n.ctor \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-clikeformat.html#CommentRegEx","title":"CLikeFormat.CommentRegEx","content":"CLikeFormat.CommentRegEx \nCommentRegEx \n\n            Regular expression string to match single line and multi-line \n            comments (// and /* */). \n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-clikeformat.html#StringRegEx","title":"CLikeFormat.StringRegEx","content":"CLikeFormat.StringRegEx \nStringRegEx \n\n            Regular expression string to match string and character literals. \n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-cplusplusformat.html","title":"CPlusPlusFormat","content":"CPlusPlusFormat \n\n            Generates color-coded HTML 4.01 from C\u002B\u002B source code.\n             \nCPlusPlusFormat..ctor \n.ctor \nCPlusPlusFormat.Keywords \nKeywords \nCPlusPlusFormat.Preprocessors \nPreprocessors"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-cplusplusformat.html#.ctor","title":"CPlusPlusFormat..ctor","content":"CPlusPlusFormat..ctor \n.ctor \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-cplusplusformat.html#Keywords","title":"CPlusPlusFormat.Keywords","content":"CPlusPlusFormat.Keywords \nKeywords \n\n            The list of C\u002B\u002B keywords.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-cplusplusformat.html#Preprocessors","title":"CPlusPlusFormat.Preprocessors","content":"CPlusPlusFormat.Preprocessors \nPreprocessors \n\n            The list of C\u002B\u002B preprocessors.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-csharpformat.html","title":"CSharpFormat","content":"CSharpFormat \n\n            Generates color-coded HTML 4.01 from C# source code.\n             \nCSharpFormat..ctor \n.ctor \nCSharpFormat.Keywords \nKeywords \nCSharpFormat.Preprocessors \nPreprocessors \nCSharpFormat.Operators \nOperators"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-csharpformat.html#.ctor","title":"CSharpFormat..ctor","content":"CSharpFormat..ctor \n.ctor \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-csharpformat.html#Keywords","title":"CSharpFormat.Keywords","content":"CSharpFormat.Keywords \nKeywords \n\n            The list of C# keywords.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-csharpformat.html#Preprocessors","title":"CSharpFormat.Preprocessors","content":"CSharpFormat.Preprocessors \nPreprocessors \n\n            The list of C# preprocessors.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-csharpformat.html#Operators","title":"CSharpFormat.Operators","content":"CSharpFormat.Operators \nOperators \n\n            TBD\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-codeformat.html","title":"CodeFormat","content":"CodeFormat \n\n            Provides a base class for formatting most programming languages.\n             \nCodeFormat..ctor \n.ctor \nCodeFormat.Keywords \nKeywords \nCodeFormat.Operators \nOperators \nCodeFormat.Preprocessors \nPreprocessors \nCodeFormat.StringRegEx \nStringRegEx \nCodeFormat.CommentRegEx \nCommentRegEx \nCodeFormat.NumberRegEx \nNumberRegEx \nCodeFormat.CaseSensitive \nCaseSensitive"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-codeformat.html#.ctor","title":"CodeFormat..ctor","content":"CodeFormat..ctor \n.ctor \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-codeformat.html#Keywords","title":"CodeFormat.Keywords","content":"CodeFormat.Keywords \nKeywords \n\n            Must be overridden to provide a list of keywords defined in \n            each language.\n             \n\n            Keywords must be separated with spaces.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-codeformat.html#Operators","title":"CodeFormat.Operators","content":"CodeFormat.Operators \nOperators \n\n            Must be overridden to provide a list of operators defined in \n            each language.\n             \n\n            Operators must be separated with spaces.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-codeformat.html#Preprocessors","title":"CodeFormat.Preprocessors","content":"CodeFormat.Preprocessors \nPreprocessors \n\n            Can be overridden to provide a list of preprocessors defined in \n            each language.\n             \n\n            Preprocessors must be separated with spaces.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-codeformat.html#StringRegEx","title":"CodeFormat.StringRegEx","content":"CodeFormat.StringRegEx \nStringRegEx \n\n            Must be overridden to provide a regular expression string\n            to match strings literals. \n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-codeformat.html#CommentRegEx","title":"CodeFormat.CommentRegEx","content":"CodeFormat.CommentRegEx \nCommentRegEx \n\n            Must be overridden to provide a regular expression string\n            to match comments. \n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-codeformat.html#NumberRegEx","title":"CodeFormat.NumberRegEx","content":"CodeFormat.NumberRegEx \nNumberRegEx \n\n            Can be overridden to provide a list of tokes to be recognized as numbers.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-codeformat.html#CaseSensitive","title":"CodeFormat.CaseSensitive","content":"CodeFormat.CaseSensitive \nCaseSensitive \n\n            Determines if the language is case sensitive.\n             \n\n            A case-insensitive language formatter must override this \n            property to return false.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-fsharpformat.html","title":"FSharpFormat","content":"FSharpFormat \n\n            Generates color-coded HTML 4.01 from F# source code.\n             \nFSharpFormat..ctor \n.ctor \nFSharpFormat.Operators \nOperators \nFSharpFormat.CommentRegEx \nCommentRegEx \nFSharpFormat.Keywords \nKeywords \nFSharpFormat.StringRegEx \nStringRegEx \nFSharpFormat.Preprocessors \nPreprocessors"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-fsharpformat.html#.ctor","title":"FSharpFormat..ctor","content":"FSharpFormat..ctor \n.ctor \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-fsharpformat.html#Operators","title":"FSharpFormat.Operators","content":"FSharpFormat.Operators \nOperators \n\n            TBD\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-fsharpformat.html#CommentRegEx","title":"FSharpFormat.CommentRegEx","content":"FSharpFormat.CommentRegEx \nCommentRegEx \n\n            Regular expression string to match single line and multi-line \n            comments (// and (* *)). \n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-fsharpformat.html#Keywords","title":"FSharpFormat.Keywords","content":"FSharpFormat.Keywords \nKeywords \n\n            The list of F# keywords.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-fsharpformat.html#StringRegEx","title":"FSharpFormat.StringRegEx","content":"FSharpFormat.StringRegEx \nStringRegEx \n\n            Regular expression string to match string and character literals. \n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-fsharpformat.html#Preprocessors","title":"FSharpFormat.Preprocessors","content":"FSharpFormat.Preprocessors \nPreprocessors \n\n            TBD\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-haskellformat.html","title":"HaskellFormat","content":"HaskellFormat \n\n            Generates color-coded HTML 4.01 from MSH (code name Monad) source code.\n             \nHaskellFormat..ctor \n.ctor \nHaskellFormat.CommentRegEx \nCommentRegEx \nHaskellFormat.StringRegEx \nStringRegEx \nHaskellFormat.Keywords \nKeywords \nHaskellFormat.Preprocessors \nPreprocessors"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-haskellformat.html#.ctor","title":"HaskellFormat..ctor","content":"HaskellFormat..ctor \n.ctor \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-haskellformat.html#CommentRegEx","title":"HaskellFormat.CommentRegEx","content":"HaskellFormat.CommentRegEx \nCommentRegEx \n\n            Regular expression string to match single line comments (#).\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-haskellformat.html#StringRegEx","title":"HaskellFormat.StringRegEx","content":"HaskellFormat.StringRegEx \nStringRegEx \n\n            Regular expression string to match string and character literals. \n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-haskellformat.html#Keywords","title":"HaskellFormat.Keywords","content":"HaskellFormat.Keywords \nKeywords \n\n            The list of MSH keywords.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-haskellformat.html#Preprocessors","title":"HaskellFormat.Preprocessors","content":"HaskellFormat.Preprocessors \nPreprocessors \n\n            Use preprocessors property to hilight operators.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-htmlformat.html","title":"HtmlFormat","content":"HtmlFormat \n\n            Generates color-coded HTML 4.01 from HTML/XML/ASPX source code.\n             \n\u003Cp class=\u0027fsdocs-para\u0027\u003E\n            This implementation assumes that code inside \u003Cscript\u003E blocks \n            is JavaScript, and code inside \u003C% %\u003E blocks is C#.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n            The default tab width is set to 2 characters in this class.\u003C/p\u003E \nHtmlFormat..ctor \n.ctor"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-htmlformat.html#.ctor","title":"HtmlFormat..ctor","content":"HtmlFormat..ctor \n.ctor \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-javascriptformat.html","title":"JavaScriptFormat","content":"JavaScriptFormat \n\n            Generates color-coded HTML 4.01 from JavaSctript source code.\n             \nJavaScriptFormat..ctor \n.ctor \nJavaScriptFormat.Keywords \nKeywords \nJavaScriptFormat.Preprocessors \nPreprocessors \nJavaScriptFormat.Operators \nOperators"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-javascriptformat.html#.ctor","title":"JavaScriptFormat..ctor","content":"JavaScriptFormat..ctor \n.ctor \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-javascriptformat.html#Keywords","title":"JavaScriptFormat.Keywords","content":"JavaScriptFormat.Keywords \nKeywords \n\n            The list of JavaScript keywords.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-javascriptformat.html#Preprocessors","title":"JavaScriptFormat.Preprocessors","content":"JavaScriptFormat.Preprocessors \nPreprocessors \n\n            Use the pre-processor color to mark directives that start with @.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-javascriptformat.html#Operators","title":"JavaScriptFormat.Operators","content":"JavaScriptFormat.Operators \nOperators \n\n            TBD\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-mshformat.html","title":"MshFormat","content":"MshFormat \n\n            Generates color-coded HTML 4.01 from MSH (code name Monad) source code.\n             \nMshFormat..ctor \n.ctor \nMshFormat.CommentRegEx \nCommentRegEx \nMshFormat.StringRegEx \nStringRegEx \nMshFormat.Keywords \nKeywords \nMshFormat.Preprocessors \nPreprocessors"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-mshformat.html#.ctor","title":"MshFormat..ctor","content":"MshFormat..ctor \n.ctor \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-mshformat.html#CommentRegEx","title":"MshFormat.CommentRegEx","content":"MshFormat.CommentRegEx \nCommentRegEx \n\n            Regular expression string to match single line comments (#).\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-mshformat.html#StringRegEx","title":"MshFormat.StringRegEx","content":"MshFormat.StringRegEx \nStringRegEx \n\n            Regular expression string to match string and character literals. \n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-mshformat.html#Keywords","title":"MshFormat.Keywords","content":"MshFormat.Keywords \nKeywords \n\n            The list of MSH keywords.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-mshformat.html#Preprocessors","title":"MshFormat.Preprocessors","content":"MshFormat.Preprocessors \nPreprocessors \n\n            Use preprocessors property to hilight operators.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-paketformat.html","title":"PaketFormat","content":"PaketFormat \n\n            Generates color-coded Paket source code.\n             \nPaketFormat..ctor \n.ctor \nPaketFormat.CommentRegEx \nCommentRegEx \nPaketFormat.Operators \nOperators \nPaketFormat.Keywords \nKeywords \nPaketFormat.NumberRegEx \nNumberRegEx"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-paketformat.html#.ctor","title":"PaketFormat..ctor","content":"PaketFormat..ctor \n.ctor \n\n            TBD\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-paketformat.html#CommentRegEx","title":"PaketFormat.CommentRegEx","content":"PaketFormat.CommentRegEx \nCommentRegEx \n\n             Regular expression string to match single line and multi-line \n             comments (// and (* *)). Single line comments should have to have \n             a space after them to avoid color as comments URLs and paths. For example\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-paketformat.html#Operators","title":"PaketFormat.Operators","content":"PaketFormat.Operators \nOperators \n\n            Paket operators\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-paketformat.html#Keywords","title":"PaketFormat.Keywords","content":"PaketFormat.Keywords \nKeywords \n\n            Paket Keywords\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-paketformat.html#NumberRegEx","title":"PaketFormat.NumberRegEx","content":"PaketFormat.NumberRegEx \nNumberRegEx \n\n            Matches version numbers\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-phpformat.html","title":"PhpFormat","content":"PhpFormat \n\n            Generates color-coded HTML 4.01 from PHP source code.\n             \nPhpFormat..ctor \n.ctor \nPhpFormat.StringRegEx \nStringRegEx \nPhpFormat.Keywords \nKeywords \nPhpFormat.Preprocessors \nPreprocessors"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-phpformat.html#.ctor","title":"PhpFormat..ctor","content":"PhpFormat..ctor \n.ctor \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-phpformat.html#StringRegEx","title":"PhpFormat.StringRegEx","content":"PhpFormat.StringRegEx \nStringRegEx \n\n            Regular expression string to match string and character literals. \n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-phpformat.html#Keywords","title":"PhpFormat.Keywords","content":"PhpFormat.Keywords \nKeywords \n\n            The list of PHP keywords.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-phpformat.html#Preprocessors","title":"PhpFormat.Preprocessors","content":"PhpFormat.Preprocessors \nPreprocessors \n\n            The list of PHP preprocessors.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-sourceformat.html","title":"SourceFormat","content":"SourceFormat \n\n            Provides a base implementation for all code formatters.\n             \n\u003Cp class=\u0027fsdocs-para\u0027\u003E\n            To display the formatted code on your web site, the web page must \n            refer to a stylesheet that defines the formatting for the different \n            CSS classes generated by CSharpFormat:\n            .csharpcode, pre, .rem, .kwrd, .str, .op, .preproc, .alt, .lnum.\n            \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n            Note that if you have multi-line comments in your source code\n            (like /* ... */), the \u0022line numbers\u0022 or \u0022alternate line background\u0022 \n            options will generate code that is not strictly HTML 4.01 compliant. \n            The code will still look good with IE5\u002B or Mozilla 0.8\u002B. \n            \u003C/p\u003E \nSourceFormat..ctor \n.ctor \nSourceFormat.FormatCode \nFormatCode \nSourceFormat.FormatCode \nFormatCode \nSourceFormat.FormatSubCode \nFormatSubCode \nSourceFormat.TabSpaces \nTabSpaces \nSourceFormat.LineNumbers \nLineNumbers \nSourceFormat.Alternate \nAlternate \nSourceFormat.EmbedStyleSheet \nEmbedStyleSheet \nSourceFormat.CodeRegex \nCodeRegex \nSourceFormat.GetCssStream \nGetCssStream \nSourceFormat.GetCssString \nGetCssString \nSourceFormat.EscapeHtml \nEscapeHtml"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-sourceformat.html#.ctor","title":"SourceFormat..ctor","content":"SourceFormat..ctor \n.ctor \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-sourceformat.html#FormatCode","title":"SourceFormat.FormatCode","content":"SourceFormat.FormatCode \nFormatCode \n\n            Transforms a source code stream to HTML 4.01.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-sourceformat.html#FormatCode","title":"SourceFormat.FormatCode","content":"SourceFormat.FormatCode \nFormatCode \n\n            Transforms a source code string to HTML 4.01.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-sourceformat.html#FormatSubCode","title":"SourceFormat.FormatSubCode","content":"SourceFormat.FormatSubCode \nFormatSubCode \n\n            Allows formatting a part of the code in a different language,\n            for example a JavaScript block inside an HTML file.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-sourceformat.html#TabSpaces","title":"SourceFormat.TabSpaces","content":"SourceFormat.TabSpaces \nTabSpaces \n\n            Gets or sets the tabs width.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-sourceformat.html#LineNumbers","title":"SourceFormat.LineNumbers","content":"SourceFormat.LineNumbers \nLineNumbers \n\n            Enables or disables line numbers in output.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-sourceformat.html#Alternate","title":"SourceFormat.Alternate","content":"SourceFormat.Alternate \nAlternate \n\n            Enables or disables alternating line background.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-sourceformat.html#EmbedStyleSheet","title":"SourceFormat.EmbedStyleSheet","content":"SourceFormat.EmbedStyleSheet \nEmbedStyleSheet \n\n            Enables or disables the embedded CSS style sheet.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-sourceformat.html#CodeRegex","title":"SourceFormat.CodeRegex","content":"SourceFormat.CodeRegex \nCodeRegex \n\n            The regular expression used to capture language tokens.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-sourceformat.html#GetCssStream","title":"SourceFormat.GetCssStream","content":"SourceFormat.GetCssStream \nGetCssStream \n\n            Gets the CSS stylesheet as a stream.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-sourceformat.html#GetCssString","title":"SourceFormat.GetCssString","content":"SourceFormat.GetCssString \nGetCssString \n\n            Gets the CSS stylesheet as a string.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-sourceformat.html#EscapeHtml","title":"SourceFormat.EscapeHtml","content":"SourceFormat.EscapeHtml \nEscapeHtml \n\n            TBD\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-syntaxhighlighter.html","title":"SyntaxHighlighter","content":"SyntaxHighlighter \n\n            Summary description for SyntaxHighlighter\n             \nSyntaxHighlighter..ctor \n.ctor \nSyntaxHighlighter.FormatHtml \nFormatHtml \nSyntaxHighlighter.FormatCode \nFormatCode"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-syntaxhighlighter.html#.ctor","title":"SyntaxHighlighter..ctor","content":"SyntaxHighlighter..ctor \n.ctor \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-syntaxhighlighter.html#FormatHtml","title":"SyntaxHighlighter.FormatHtml","content":"SyntaxHighlighter.FormatHtml \nFormatHtml \n\n            TBD\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-syntaxhighlighter.html#FormatCode","title":"SyntaxHighlighter.FormatCode","content":"SyntaxHighlighter.FormatCode \nFormatCode \n\n            TBD\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-tsqlformat.html","title":"TsqlFormat","content":"TsqlFormat \n\n            Generates color-coded T-SQL source code.\n             \nTsqlFormat..ctor \n.ctor \nTsqlFormat.CommentRegEx \nCommentRegEx \nTsqlFormat.StringRegEx \nStringRegEx \nTsqlFormat.CaseSensitive \nCaseSensitive \nTsqlFormat.Keywords \nKeywords \nTsqlFormat.Preprocessors \nPreprocessors"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-tsqlformat.html#.ctor","title":"TsqlFormat..ctor","content":"TsqlFormat..ctor \n.ctor \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-tsqlformat.html#CommentRegEx","title":"TsqlFormat.CommentRegEx","content":"TsqlFormat.CommentRegEx \nCommentRegEx \n\n            Regular expression string to match single line \n            comments (--). \n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-tsqlformat.html#StringRegEx","title":"TsqlFormat.StringRegEx","content":"TsqlFormat.StringRegEx \nStringRegEx \n\n            Regular expression string to match string literals. \n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-tsqlformat.html#CaseSensitive","title":"TsqlFormat.CaseSensitive","content":"TsqlFormat.CaseSensitive \nCaseSensitive \n\n            Returns \u003Cb\u003Efalse\u003C/b\u003E, since T-SQL is not case sensitive.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-tsqlformat.html#Keywords","title":"TsqlFormat.Keywords","content":"TsqlFormat.Keywords \nKeywords \n\n            The list of T-SQL keywords.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-tsqlformat.html#Preprocessors","title":"TsqlFormat.Preprocessors","content":"TsqlFormat.Preprocessors \nPreprocessors \n\n            Use the pre-processor color to mark keywords that start with @@.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-typescriptformat.html","title":"TypeScriptFormat","content":"TypeScriptFormat \n\n            Generates color-coded HTML 4.01 from TypeScript source code.\n             \nTypeScriptFormat..ctor \n.ctor \nTypeScriptFormat.Keywords \nKeywords"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-typescriptformat.html#.ctor","title":"TypeScriptFormat..ctor","content":"TypeScriptFormat..ctor \n.ctor \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-typescriptformat.html#Keywords","title":"TypeScriptFormat.Keywords","content":"TypeScriptFormat.Keywords \nKeywords \n\n            The list of TypeScript keywords extends the ones from JavaScript.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-visualbasicformat.html","title":"VisualBasicFormat","content":"VisualBasicFormat \n\n            Generates color-coded HTML 4.01 from Visual Basic source code.\n             \nVisualBasicFormat..ctor \n.ctor \nVisualBasicFormat.CaseSensitive \nCaseSensitive \nVisualBasicFormat.CommentRegEx \nCommentRegEx \nVisualBasicFormat.StringRegEx \nStringRegEx \nVisualBasicFormat.Keywords \nKeywords \nVisualBasicFormat.Preprocessors \nPreprocessors"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-visualbasicformat.html#.ctor","title":"VisualBasicFormat..ctor","content":"VisualBasicFormat..ctor \n.ctor \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-visualbasicformat.html#CaseSensitive","title":"VisualBasicFormat.CaseSensitive","content":"VisualBasicFormat.CaseSensitive \nCaseSensitive \n\n            Determines if the language is case sensitive.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-visualbasicformat.html#CommentRegEx","title":"VisualBasicFormat.CommentRegEx","content":"VisualBasicFormat.CommentRegEx \nCommentRegEx \n\n            Regular expression string to match comments (\u0027 and REM). \n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-visualbasicformat.html#StringRegEx","title":"VisualBasicFormat.StringRegEx","content":"VisualBasicFormat.StringRegEx \nStringRegEx \n\n            Regular expression string to match string and character literals. \n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-visualbasicformat.html#Keywords","title":"VisualBasicFormat.Keywords","content":"VisualBasicFormat.Keywords \nKeywords \n\n            The list of VB keywords.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-csharpformat-visualbasicformat.html#Preprocessors","title":"VisualBasicFormat.Preprocessors","content":"VisualBasicFormat.Preprocessors \nPreprocessors \n\n            The list of VB preprocessors.\n            "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-codeformat.html","title":"CodeFormat","content":"CodeFormat \n\n Exposes functionality of the F# code formatter with a nice interface\n \nCodeFormat.CreateAgent \nCreateAgent \nCodeFormat.FormatFsx \nFormatFsx \nCodeFormat.FormatHtml \nFormatHtml \nCodeFormat.FormatLatex \nFormatLatex"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-codeformat.html#CreateAgent","title":"CodeFormat.CreateAgent","content":"CodeFormat.CreateAgent \nCreateAgent \n\n Returns a new instance of the agent that manages code formatting\n using the F# compiler service. \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-codeformat.html#FormatFsx","title":"CodeFormat.FormatFsx","content":"CodeFormat.FormatFsx \nFormatFsx \n\n Formats the .fsx snippets as iPython notebook using the default settings.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-codeformat.html#FormatHtml","title":"CodeFormat.FormatHtml","content":"CodeFormat.FormatHtml \nFormatHtml \n\n Formats the .fsx snippets as HTML. The parameters specify prefix for HTML tags, whether lines should\n be added to outputs and whether errors should be printed.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-codeformat.html#FormatLatex","title":"CodeFormat.FormatLatex","content":"CodeFormat.FormatLatex \nFormatLatex \n\n Formats the .fsx snippets as LaTeX. The parameters specify prefix for LaTeX tags, whether lines should\n be added to outputs.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-codeformatagent.html","title":"CodeFormatAgent","content":"CodeFormatAgent \n\n Uses agent to handle formatting requests\n \nCodeFormatAgent.( .ctor ) \n( .ctor ) \nCodeFormatAgent.AsyncParseAndCheckSource \nAsyncParseAndCheckSource \nCodeFormatAgent.ParseAndCheckSource \nParseAndCheckSource"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-codeformatagent.html#( .ctor )","title":"CodeFormatAgent.( .ctor )","content":"CodeFormatAgent.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-codeformatagent.html#AsyncParseAndCheckSource","title":"CodeFormatAgent.AsyncParseAndCheckSource","content":"CodeFormatAgent.AsyncParseAndCheckSource \nAsyncParseAndCheckSource \n\n Parse, check and annotate the source code specified by \u0027source\u0027, assuming that it\n is located in a specified \u0027file\u0027. Optional arguments can be used\n to give compiler command line options and preprocessor definitions\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-codeformatagent.html#ParseAndCheckSource","title":"CodeFormatAgent.ParseAndCheckSource","content":"CodeFormatAgent.ParseAndCheckSource \nParseAndCheckSource \n\n Parse, check and annotate the source code specified by \u0027source\u0027, assuming that it\n is located in a specified \u0027file\u0027. Optional arguments can be used\n to give compiler command line options and preprocessor definitions\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-errorkind.html","title":"ErrorKind","content":"ErrorKind \n\n Represents a kind of error reported from the F# compiler (warning or error)\n \nErrorKind.Error \nError \nErrorKind.Warning \nWarning"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-errorkind.html#Error","title":"ErrorKind.Error","content":"ErrorKind.Error \nError \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-errorkind.html#Warning","title":"ErrorKind.Warning","content":"ErrorKind.Warning \nWarning \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-formattedcontent.html","title":"FormattedContent","content":"FormattedContent \n\n Represents formatted snippets\n \nFormattedContent.( .ctor ) \n( .ctor ) \nFormattedContent.Snippets \nSnippets \nFormattedContent.ToolTip \nToolTip"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-formattedcontent.html#( .ctor )","title":"FormattedContent.( .ctor )","content":"FormattedContent.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-formattedcontent.html#Snippets","title":"FormattedContent.Snippets","content":"FormattedContent.Snippets \nSnippets \n\n Returns the processed snippets as an array\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-formattedcontent.html#ToolTip","title":"FormattedContent.ToolTip","content":"FormattedContent.ToolTip \nToolTip \n\n Returns string with ToolTip elements for all the snippets\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-formattedsnippet.html","title":"FormattedSnippet","content":"FormattedSnippet \n\n  Represents an individual formatted snippet with title as key\n  \nFormattedSnippet.( .ctor ) \n( .ctor ) \nFormattedSnippet.Content \nContent \nFormattedSnippet.Title \nTitle \nFormattedSnippet.Key \nKey"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-formattedsnippet.html#( .ctor )","title":"FormattedSnippet.( .ctor )","content":"FormattedSnippet.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-formattedsnippet.html#Content","title":"FormattedSnippet.Content","content":"FormattedSnippet.Content \nContent \n\n Returns the formatted content code for the snipet\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-formattedsnippet.html#Title","title":"FormattedSnippet.Title","content":"FormattedSnippet.Title \nTitle \n\n Returns the title of the snippet \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-formattedsnippet.html#Key","title":"FormattedSnippet.Key","content":"FormattedSnippet.Key \nKey \n\n Returns the key of the snippet \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-line.html","title":"Line","content":"Line \n\n Represents a line of source code as a list of TokenSpan values. This is\n a single case discriminated union with Line constructor.\n \nLine.Line \nLine"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-line.html#Line","title":"Line.Line","content":"Line.Line \nLine \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-snippet.html","title":"Snippet","content":"Snippet \n\n An F# snippet consists of a snippet title and a list of lines\n \nSnippet.Snippet \nSnippet"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-snippet.html#Snippet","title":"Snippet.Snippet","content":"Snippet.Snippet \nSnippet \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-sourceerror.html","title":"SourceError","content":"SourceError \n\n Error reported from the F# compiler consists of location (start and end),\n error kind and the message (wrapped in a single case discriminated union\n with constructor SourceError)\n \nSourceError.SourceError \nSourceError"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-sourceerror.html#SourceError","title":"SourceError.SourceError","content":"SourceError.SourceError \nSourceError \n\n Error reported from the F# compiler consists of location (start and end),\n error kind and the message\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html","title":"TokenKind","content":"TokenKind \n\n Classifies tokens reported by the FCS\n \nTokenKind.Keyword \nKeyword \nTokenKind.String \nString \nTokenKind.Comment \nComment \nTokenKind.Identifier \nIdentifier \nTokenKind.Inactive \nInactive \nTokenKind.Number \nNumber \nTokenKind.Operator \nOperator \nTokenKind.Punctuation \nPunctuation \nTokenKind.Preprocessor \nPreprocessor \nTokenKind.Module \nModule \nTokenKind.ReferenceType \nReferenceType \nTokenKind.ValueType \nValueType \nTokenKind.Interface \nInterface \nTokenKind.TypeArgument \nTypeArgument \nTokenKind.Property \nProperty \nTokenKind.Enumeration \nEnumeration \nTokenKind.UnionCase \nUnionCase \nTokenKind.Function \nFunction \nTokenKind.Pattern \nPattern \nTokenKind.MutableVar \nMutableVar \nTokenKind.Disposable \nDisposable \nTokenKind.Printf \nPrintf \nTokenKind.Escaped \nEscaped \nTokenKind.Default \nDefault"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Keyword","title":"TokenKind.Keyword","content":"TokenKind.Keyword \nKeyword \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#String","title":"TokenKind.String","content":"TokenKind.String \nString \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Comment","title":"TokenKind.Comment","content":"TokenKind.Comment \nComment \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Identifier","title":"TokenKind.Identifier","content":"TokenKind.Identifier \nIdentifier \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Inactive","title":"TokenKind.Inactive","content":"TokenKind.Inactive \nInactive \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Number","title":"TokenKind.Number","content":"TokenKind.Number \nNumber \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Operator","title":"TokenKind.Operator","content":"TokenKind.Operator \nOperator \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Punctuation","title":"TokenKind.Punctuation","content":"TokenKind.Punctuation \nPunctuation \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Preprocessor","title":"TokenKind.Preprocessor","content":"TokenKind.Preprocessor \nPreprocessor \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Module","title":"TokenKind.Module","content":"TokenKind.Module \nModule \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#ReferenceType","title":"TokenKind.ReferenceType","content":"TokenKind.ReferenceType \nReferenceType \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#ValueType","title":"TokenKind.ValueType","content":"TokenKind.ValueType \nValueType \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Interface","title":"TokenKind.Interface","content":"TokenKind.Interface \nInterface \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#TypeArgument","title":"TokenKind.TypeArgument","content":"TokenKind.TypeArgument \nTypeArgument \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Property","title":"TokenKind.Property","content":"TokenKind.Property \nProperty \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Enumeration","title":"TokenKind.Enumeration","content":"TokenKind.Enumeration \nEnumeration \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#UnionCase","title":"TokenKind.UnionCase","content":"TokenKind.UnionCase \nUnionCase \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Function","title":"TokenKind.Function","content":"TokenKind.Function \nFunction \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Pattern","title":"TokenKind.Pattern","content":"TokenKind.Pattern \nPattern \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#MutableVar","title":"TokenKind.MutableVar","content":"TokenKind.MutableVar \nMutableVar \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Disposable","title":"TokenKind.Disposable","content":"TokenKind.Disposable \nDisposable \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Printf","title":"TokenKind.Printf","content":"TokenKind.Printf \nPrintf \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Escaped","title":"TokenKind.Escaped","content":"TokenKind.Escaped \nEscaped \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenkind.html#Default","title":"TokenKind.Default","content":"TokenKind.Default \nDefault \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenspan.html","title":"TokenSpan","content":"TokenSpan \n\n A token in a parsed F# code snippet. Aside from standard tokens reported from\n the compiler (Token), this also includes Error (wrapping the underlined\n tokens), Omitted for the special [omit:...] tags and Output for the special\n [output:...] tag\n \nTokenSpan.Token \nToken \nTokenSpan.Error \nError \nTokenSpan.Omitted \nOmitted \nTokenSpan.Output \nOutput"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenspan.html#Token","title":"TokenSpan.Token","content":"TokenSpan.Token \nToken \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenspan.html#Error","title":"TokenSpan.Error","content":"TokenSpan.Error \nError \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenspan.html#Omitted","title":"TokenSpan.Omitted","content":"TokenSpan.Omitted \nOmitted \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenspan.html#Output","title":"TokenSpan.Output","content":"TokenSpan.Output \nOutput \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenspans.html","title":"TokenSpans","content":"TokenSpans \n\n A type alias representing a list of TokenSpan values\n \nTokenSpans.IsEmpty \nIsEmpty \nTokenSpans.Tail \nTail \nTokenSpans.Item \nItem \nTokenSpans.Head \nHead \nTokenSpans.Length \nLength \nTokenSpans.Empty \nEmpty"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenspans.html#IsEmpty","title":"TokenSpans.IsEmpty","content":"TokenSpans.IsEmpty \nIsEmpty \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenspans.html#Tail","title":"TokenSpans.Tail","content":"TokenSpans.Tail \nTail \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenspans.html#Item","title":"TokenSpans.Item","content":"TokenSpans.Item \nItem \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenspans.html#Head","title":"TokenSpans.Head","content":"TokenSpans.Head \nHead \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenspans.html#Length","title":"TokenSpans.Length","content":"TokenSpans.Length \nLength \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tokenspans.html#Empty","title":"TokenSpans.Empty","content":"TokenSpans.Empty \nEmpty \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tooltipspan.html","title":"ToolTipSpan","content":"ToolTipSpan \n\n A tool tip span can be emphasized text, plain text Literal or a line brak\n \nToolTipSpan.Emphasis \nEmphasis \nToolTipSpan.Literal \nLiteral \nToolTipSpan.HardLineBreak \nHardLineBreak"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tooltipspan.html#Emphasis","title":"ToolTipSpan.Emphasis","content":"ToolTipSpan.Emphasis \nEmphasis \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tooltipspan.html#Literal","title":"ToolTipSpan.Literal","content":"ToolTipSpan.Literal \nLiteral \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tooltipspan.html#HardLineBreak","title":"ToolTipSpan.HardLineBreak","content":"ToolTipSpan.HardLineBreak \nHardLineBreak \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tooltipspans.html","title":"ToolTipSpans","content":"ToolTipSpans \n\n A tool tip consists of a list of items reported from the compiler\n \nToolTipSpans.IsEmpty \nIsEmpty \nToolTipSpans.Tail \nTail \nToolTipSpans.Item \nItem \nToolTipSpans.Head \nHead \nToolTipSpans.Length \nLength \nToolTipSpans.Empty \nEmpty"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tooltipspans.html#IsEmpty","title":"ToolTipSpans.IsEmpty","content":"ToolTipSpans.IsEmpty \nIsEmpty \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tooltipspans.html#Tail","title":"ToolTipSpans.Tail","content":"ToolTipSpans.Tail \nTail \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tooltipspans.html#Item","title":"ToolTipSpans.Item","content":"ToolTipSpans.Item \nItem \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tooltipspans.html#Head","title":"ToolTipSpans.Head","content":"ToolTipSpans.Head \nHead \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tooltipspans.html#Length","title":"ToolTipSpans.Length","content":"ToolTipSpans.Length \nLength \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-codeformat-tooltipspans.html#Empty","title":"ToolTipSpans.Empty","content":"ToolTipSpans.Empty \nEmpty \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-markdownpatterns.html","title":"MarkdownPatterns","content":"MarkdownPatterns \n\n Provides active patterns for extracting \u003Ccode\u003ELiterateParagraph\u003C/code\u003E values from\n Markdown documents.\n  \nMarkdownPatterns.( |LiterateParagraph|_| ) \n( |LiterateParagraph|_| )"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-markdownpatterns.html#( |LiterateParagraph|_| )","title":"MarkdownPatterns.( |LiterateParagraph|_| )","content":"MarkdownPatterns.( |LiterateParagraph|_| ) \n( |LiterateParagraph|_| ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literate.html","title":"Literate","content":"Literate \n\n This type provides three simple methods for calling the literate programming tool.\n The \u003Ccode\u003EConvertMarkdownFile\u003C/code\u003E and \u003Ccode\u003EConvertScriptFile\u003C/code\u003E methods process a single Markdown document\n and F# script, respectively. The \u003Ccode\u003EConvertDirectory\u003C/code\u003E method handles an entire directory tree\n (looking for \u003Ccode\u003E*.fsx\u003C/code\u003E and \u003Ccode\u003E*.md\u003C/code\u003E files).\n  \nLiterate.ConvertMarkdownFile \nConvertMarkdownFile \nLiterate.ConvertScriptFile \nConvertScriptFile \nLiterate.ParseAndCheckScriptFile \nParseAndCheckScriptFile \nLiterate.ParseMarkdownFile \nParseMarkdownFile \nLiterate.ParseMarkdownString \nParseMarkdownString \nLiterate.ParseScriptString \nParseScriptString \nLiterate.ToFsx \nToFsx \nLiterate.ToHtml \nToHtml \nLiterate.ToLatex \nToLatex \nLiterate.ToPynb \nToPynb \nLiterate.TransformAndOutputDocument \nTransformAndOutputDocument \nLiterate.WriteHtml \nWriteHtml \nLiterate.WriteLatex \nWriteLatex"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literate.html#ConvertMarkdownFile","title":"Literate.ConvertMarkdownFile","content":"Literate.ConvertMarkdownFile \nConvertMarkdownFile \n\n Convert a markdown file into HTML or another output kind\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literate.html#ConvertScriptFile","title":"Literate.ConvertScriptFile","content":"Literate.ConvertScriptFile \nConvertScriptFile \nConvert a script file into HTML or another output kind"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literate.html#ParseAndCheckScriptFile","title":"Literate.ParseAndCheckScriptFile","content":"Literate.ParseAndCheckScriptFile \nParseAndCheckScriptFile \n\n Parse F# Script file to LiterateDocument\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literate.html#ParseMarkdownFile","title":"Literate.ParseMarkdownFile","content":"Literate.ParseMarkdownFile \nParseMarkdownFile \n\n  Parse Markdown document to LiterateDocument\n "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literate.html#ParseMarkdownString","title":"Literate.ParseMarkdownString","content":"Literate.ParseMarkdownString \nParseMarkdownString \n\n  Parse string as a markdown document\n "},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literate.html#ParseScriptString","title":"Literate.ParseScriptString","content":"Literate.ParseScriptString \nParseScriptString \n\n Parse string as F# Script to LiterateDocument\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literate.html#ToFsx","title":"Literate.ToFsx","content":"Literate.ToFsx \nToFsx \n\n Formate the literate document as an .fsx script \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literate.html#ToHtml","title":"Literate.ToHtml","content":"Literate.ToHtml \nToHtml \n\n Format the literate document as HTML without using a template\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literate.html#ToLatex","title":"Literate.ToLatex","content":"Literate.ToLatex \nToLatex \n\n Format the literate document as Latex without using a template\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literate.html#ToPynb","title":"Literate.ToPynb","content":"Literate.ToPynb \nToPynb \n\n Formate the literate document as an iPython notebook \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literate.html#TransformAndOutputDocument","title":"Literate.TransformAndOutputDocument","content":"Literate.TransformAndOutputDocument \nTransformAndOutputDocument \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literate.html#WriteHtml","title":"Literate.WriteHtml","content":"Literate.WriteHtml \nWriteHtml \n\n Write the literate document as HTML without using a template\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literate.html#WriteLatex","title":"Literate.WriteLatex","content":"Literate.WriteLatex \nWriteLatex \n\n Write the literate document as Latex without using a template\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatecodeoptions.html","title":"LiterateCodeOptions","content":"LiterateCodeOptions \n\n Additional properties of a literate code snippet, embedded in a\n \u003Ccode\u003ELiterateParagraph.LiterateCode\u003C/code\u003E. The properties specify how should\n a snippet be evaluated and formatted.\n  \nLiterateCodeOptions.Evaluate \nEvaluate \nLiterateCodeOptions.OutputName \nOutputName \nLiterateCodeOptions.ExecutionCount \nExecutionCount \nLiterateCodeOptions.Visibility \nVisibility"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatecodeoptions.html#Evaluate","title":"LiterateCodeOptions.Evaluate","content":"LiterateCodeOptions.Evaluate \nEvaluate \n\n Specifies whether the snippet is evalauted while processing\n Use (*** do-not-eval ***) command to set this to \u003Ccode\u003Efalse\u003C/code\u003E"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatecodeoptions.html#OutputName","title":"LiterateCodeOptions.OutputName","content":"LiterateCodeOptions.OutputName \nOutputName \n\n Specifies the name of the output produced by this snippet\n Use the (*** define-output:foo ***) command to set this value\n Other outputs are named cell1, cell2 etc.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatecodeoptions.html#ExecutionCount","title":"LiterateCodeOptions.ExecutionCount","content":"LiterateCodeOptions.ExecutionCount \nExecutionCount \n\n Indiciates the execution sequence number of the cell if it has been evaluated\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatecodeoptions.html#Visibility","title":"LiterateCodeOptions.Visibility","content":"LiterateCodeOptions.Visibility \nVisibility \n\n Specifies the visibility of the snippet in the generated HTML\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatecodevisibility.html","title":"LiterateCodeVisibility","content":"LiterateCodeVisibility \n\n Specifies visibility of a code snippet. \n \nLiterateCodeVisibility.VisibleCode \nVisibleCode \nLiterateCodeVisibility.HiddenCode \nHiddenCode \nLiterateCodeVisibility.NamedCode \nNamedCode"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatecodevisibility.html#VisibleCode","title":"LiterateCodeVisibility.VisibleCode","content":"LiterateCodeVisibility.VisibleCode \nVisibleCode \n\n Ordinary visible code\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatecodevisibility.html#HiddenCode","title":"LiterateCodeVisibility.HiddenCode","content":"LiterateCodeVisibility.HiddenCode \nHiddenCode \n\n Hidden snippet\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatecodevisibility.html#NamedCode","title":"LiterateCodeVisibility.NamedCode","content":"LiterateCodeVisibility.NamedCode \nNamedCode \n\n Named snippet with captured output\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatedocument.html","title":"LiterateDocument","content":"LiterateDocument \n\n Representation of a literate document - the representation of Paragraphs\n uses an F# discriminated union type and so is best used from F#.\n \nLiterateDocument.( .ctor ) \n( .ctor ) \nLiterateDocument.With \nWith \nLiterateDocument.DefinedLinks \nDefinedLinks \nLiterateDocument.RootInputFolder \nRootInputFolder \nLiterateDocument.Paragraphs \nParagraphs \nLiterateDocument.FormattedTips \nFormattedTips \nLiterateDocument.Source \nSource \nLiterateDocument.SourceFile \nSourceFile \nLiterateDocument.MarkdownDocument \nMarkdownDocument \nLiterateDocument.Diagnostics \nDiagnostics"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatedocument.html#( .ctor )","title":"LiterateDocument.( .ctor )","content":"LiterateDocument.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatedocument.html#With","title":"LiterateDocument.With","content":"LiterateDocument.With \nWith \n\n Clone the document and change some of its properties\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatedocument.html#DefinedLinks","title":"LiterateDocument.DefinedLinks","content":"LiterateDocument.DefinedLinks \nDefinedLinks \n\n Returns a dictionary containing explicitly defined links\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatedocument.html#RootInputFolder","title":"LiterateDocument.RootInputFolder","content":"LiterateDocument.RootInputFolder \nRootInputFolder \n\n Root for computing relative paths\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatedocument.html#Paragraphs","title":"LiterateDocument.Paragraphs","content":"LiterateDocument.Paragraphs \nParagraphs \n\n Returns a list of paragraphs in the document\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatedocument.html#FormattedTips","title":"LiterateDocument.FormattedTips","content":"LiterateDocument.FormattedTips \nFormattedTips \n\n Formatted tool tips\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatedocument.html#Source","title":"LiterateDocument.Source","content":"LiterateDocument.Source \nSource \n\n Original document source code\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatedocument.html#SourceFile","title":"LiterateDocument.SourceFile","content":"LiterateDocument.SourceFile \nSourceFile \n\n Location where the file was loaded from\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatedocument.html#MarkdownDocument","title":"LiterateDocument.MarkdownDocument","content":"LiterateDocument.MarkdownDocument \nMarkdownDocument \n\n Return as markdown document, throwing away additional stuff\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatedocument.html#Diagnostics","title":"LiterateDocument.Diagnostics","content":"LiterateDocument.Diagnostics \nDiagnostics \n\n Errors\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literateparagraph.html","title":"LiterateParagraph","content":"LiterateParagraph \n\n Extends \u003Ccode\u003EMarkdownParagrap\u003C/code\u003E using the \u003Ccode\u003EMarkdownEmbedParagraphs\u003C/code\u003E case with\n additional kinds of paragraphs that can appear in literate F# scripts\n (such as various special commands to embed output of a snippet etc.)\n  \nLiterateParagraph.ParagraphOptions \nParagraphOptions \nLiterateParagraph.CodeReference \nCodeReference \nLiterateParagraph.FsiOutputReference \nFsiOutputReference \nLiterateParagraph.FsiMergedOutputReference \nFsiMergedOutputReference \nLiterateParagraph.OutputReference \nOutputReference \nLiterateParagraph.ItValueReference \nItValueReference \nLiterateParagraph.ItRawReference \nItRawReference \nLiterateParagraph.ValueReference \nValueReference \nLiterateParagraph.LiterateCode \nLiterateCode \nLiterateParagraph.LanguageTaggedCode \nLanguageTaggedCode \nLiterateParagraph.RawBlock \nRawBlock"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literateparagraph.html#ParagraphOptions","title":"LiterateParagraph.ParagraphOptions","content":"LiterateParagraph.ParagraphOptions \nParagraphOptions \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literateparagraph.html#CodeReference","title":"LiterateParagraph.CodeReference","content":"LiterateParagraph.CodeReference \nCodeReference \n\n (*** include:foo ***) - Include formatted snippet from other part of the document here \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literateparagraph.html#FsiOutputReference","title":"LiterateParagraph.FsiOutputReference","content":"LiterateParagraph.FsiOutputReference \nFsiOutputReference \n\n (*** include-fsi-output ***) - Include output from previous snippet\n (*** include-fsi-output:foo ***) - Include output from a named snippet\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literateparagraph.html#FsiMergedOutputReference","title":"LiterateParagraph.FsiMergedOutputReference","content":"LiterateParagraph.FsiMergedOutputReference \nFsiMergedOutputReference \n\n (*** include-fsi-merged-output ***) - Include output from previous snippet\n (*** include-fsi-merged-output:foo ***) - Include output from a named snippet\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literateparagraph.html#OutputReference","title":"LiterateParagraph.OutputReference","content":"LiterateParagraph.OutputReference \nOutputReference \n\n (*** include-fsi-output ***) - Include F# Interactive output from previous snippet\n (*** include-fsi-output:foo ***) - Include F# Interactive from a named snippet\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literateparagraph.html#ItValueReference","title":"LiterateParagraph.ItValueReference","content":"LiterateParagraph.ItValueReference \nItValueReference \n\n (*** include-it ***) - Include \u0022it\u0022 value from the subsequent snippet here \n (*** include-it:foo ***) - Include \u0022it\u0022 value from a named snippet\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literateparagraph.html#ItRawReference","title":"LiterateParagraph.ItRawReference","content":"LiterateParagraph.ItRawReference \nItRawReference \n\n (*** include-it-raw ***) - Include \u0022it\u0022 value from the subsequent snippet here as raw text (Not formatted as fsi)\n (*** include-it-raw:foo ***) - Include \u0022it\u0022 value from a named snippet as raw text (Not formatted as fsi)\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literateparagraph.html#ValueReference","title":"LiterateParagraph.ValueReference","content":"LiterateParagraph.ValueReference \nValueReference \n\n (*** include-value:foo ***) - Include the formatting of a specified value here\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literateparagraph.html#LiterateCode","title":"LiterateParagraph.LiterateCode","content":"LiterateParagraph.LiterateCode \nLiterateCode \n\n Emebdded literate code snippet. Consists of source lines and options\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literateparagraph.html#LanguageTaggedCode","title":"LiterateParagraph.LanguageTaggedCode","content":"LiterateParagraph.LanguageTaggedCode \nLanguageTaggedCode \n\n Ordinary formatted code snippet in non-F# language (tagged with language code)\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literateparagraph.html#RawBlock","title":"LiterateParagraph.RawBlock","content":"LiterateParagraph.RawBlock \nRawBlock \n\n Block simply emitted without any formatting equivalent to \u003Cpre\u003E tag in html\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literateparagraphoptions.html","title":"LiterateParagraphOptions","content":"LiterateParagraphOptions \n\n Specifies the options for a literate paragraph\n \nLiterateParagraphOptions.Condition \nCondition"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literateparagraphoptions.html#Condition","title":"LiterateParagraphOptions.Condition","content":"LiterateParagraphOptions.Condition \nCondition \n\n Specifies a conditional for inclusion of the snippet paragraph\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatesource.html","title":"LiterateSource","content":"LiterateSource \n\n Represents the source of a literate document. \n \nLiterateSource.Markdown \nMarkdown \nLiterateSource.Script \nScript"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatesource.html#Markdown","title":"LiterateSource.Markdown","content":"LiterateSource.Markdown \nMarkdown \n\n A markdown source\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-literatesource.html#Script","title":"LiterateSource.Script","content":"LiterateSource.Script \nScript \n\n A parsed F# script file consisting of snippets.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-outputkind.html","title":"OutputKind","content":"OutputKind \n\n Defines the possible output types from literate script (HTML, Latex, Pynb)\n \nOutputKind.Extension \nExtension \nOutputKind.Html \nHtml \nOutputKind.Latex \nLatex \nOutputKind.Pynb \nPynb \nOutputKind.Fsx \nFsx \nOutputKind.Md \nMd"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-outputkind.html#Extension","title":"OutputKind.Extension","content":"OutputKind.Extension \nExtension \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-outputkind.html#Html","title":"OutputKind.Html","content":"OutputKind.Html \nHtml \n\n Requests HTML output\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-outputkind.html#Latex","title":"OutputKind.Latex","content":"OutputKind.Latex \nLatex \n\n Requests LaTeX output\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-outputkind.html#Pynb","title":"OutputKind.Pynb","content":"OutputKind.Pynb \nPynb \n\n Requests Notebook output\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-outputkind.html#Fsx","title":"OutputKind.Fsx","content":"OutputKind.Fsx \nFsx \n\n Requests F# Script output\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-outputkind.html#Md","title":"OutputKind.Md","content":"OutputKind.Md \nMd \n\n Requests Markdown output\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsiembedkind.html","title":"FsiEmbedKind","content":"FsiEmbedKind \n\n   Represents a kind of thing that can be embedded\n  \nFsiEmbedKind.FsiOutput \nFsiOutput \nFsiEmbedKind.FsiMergedOutput \nFsiMergedOutput \nFsiEmbedKind.ConsoleOutput \nConsoleOutput \nFsiEmbedKind.ItValue \nItValue \nFsiEmbedKind.ItRaw \nItRaw \nFsiEmbedKind.Value \nValue"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsiembedkind.html#FsiOutput","title":"FsiEmbedKind.FsiOutput","content":"FsiEmbedKind.FsiOutput \nFsiOutput \n\n The FSI output \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsiembedkind.html#FsiMergedOutput","title":"FsiEmbedKind.FsiMergedOutput","content":"FsiEmbedKind.FsiMergedOutput \nFsiMergedOutput \n\n The combined FSI output and console output\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsiembedkind.html#ConsoleOutput","title":"FsiEmbedKind.ConsoleOutput","content":"FsiEmbedKind.ConsoleOutput \nConsoleOutput \n\n The stdout from this part of the execution (not including FSI output)\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsiembedkind.html#ItValue","title":"FsiEmbedKind.ItValue","content":"FsiEmbedKind.ItValue \nItValue \n\n The \u0027it\u0027 value\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsiembedkind.html#ItRaw","title":"FsiEmbedKind.ItRaw","content":"FsiEmbedKind.ItRaw \nItRaw \n\n The \u0027it\u0027 value as raw text\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsiembedkind.html#Value","title":"FsiEmbedKind.Value","content":"FsiEmbedKind.Value \nValue \n\n A specific value\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluationfailedinfo.html","title":"FsiEvaluationFailedInfo","content":"FsiEvaluationFailedInfo \n\n Record that is reported by the EvaluationFailed event when something\n goes wrong during evalutaiton of an expression\n \nFsiEvaluationFailedInfo.Text \nText \nFsiEvaluationFailedInfo.AsExpression \nAsExpression \nFsiEvaluationFailedInfo.File \nFile \nFsiEvaluationFailedInfo.Exception \nException \nFsiEvaluationFailedInfo.StdErr \nStdErr"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluationfailedinfo.html#Text","title":"FsiEvaluationFailedInfo.Text","content":"FsiEvaluationFailedInfo.Text \nText \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluationfailedinfo.html#AsExpression","title":"FsiEvaluationFailedInfo.AsExpression","content":"FsiEvaluationFailedInfo.AsExpression \nAsExpression \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluationfailedinfo.html#File","title":"FsiEvaluationFailedInfo.File","content":"FsiEvaluationFailedInfo.File \nFile \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluationfailedinfo.html#Exception","title":"FsiEvaluationFailedInfo.Exception","content":"FsiEvaluationFailedInfo.Exception \nException \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluationfailedinfo.html#StdErr","title":"FsiEvaluationFailedInfo.StdErr","content":"FsiEvaluationFailedInfo.StdErr \nStdErr \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluationresult.html","title":"FsiEvaluationResult","content":"FsiEvaluationResult \n\n Represents the result of evaluating an F# snippet. This contains\n the generated console output together with a result and its static type.\n \nFsiEvaluationResult.Output \nOutput \nFsiEvaluationResult.FsiOutput \nFsiOutput \nFsiEvaluationResult.FsiMergedOutput \nFsiMergedOutput \nFsiEvaluationResult.ItValue \nItValue \nFsiEvaluationResult.Result \nResult"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluationresult.html#Output","title":"FsiEvaluationResult.Output","content":"FsiEvaluationResult.Output \nOutput \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluationresult.html#FsiOutput","title":"FsiEvaluationResult.FsiOutput","content":"FsiEvaluationResult.FsiOutput \nFsiOutput \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluationresult.html#FsiMergedOutput","title":"FsiEvaluationResult.FsiMergedOutput","content":"FsiEvaluationResult.FsiMergedOutput \nFsiMergedOutput \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluationresult.html#ItValue","title":"FsiEvaluationResult.ItValue","content":"FsiEvaluationResult.ItValue \nItValue \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluationresult.html#Result","title":"FsiEvaluationResult.Result","content":"FsiEvaluationResult.Result \nResult \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluator.html","title":"FsiEvaluator","content":"FsiEvaluator \n\n A wrapper for F# interactive service that is used to evaluate inline snippets\n \nFsiEvaluator.( .ctor ) \n( .ctor ) \nFsiEvaluator.RegisterTransformation \nRegisterTransformation \nFsiEvaluator.EvaluationFailed \nEvaluationFailed"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluator.html#( .ctor )","title":"FsiEvaluator.( .ctor )","content":"FsiEvaluator.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluator.html#RegisterTransformation","title":"FsiEvaluator.RegisterTransformation","content":"FsiEvaluator.RegisterTransformation \nRegisterTransformation \n\n Register a function that formats (some) values that are produced by the evaluator.\n The specified function should return \u0027Some\u0027 when it knows how to format a value\n and it should return formatted \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluator.html#EvaluationFailed","title":"FsiEvaluator.EvaluationFailed","content":"FsiEvaluator.EvaluationFailed \nEvaluationFailed \n\n This event is fired whenever an evaluation of an expression fails\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluatorconfig.html","title":"FsiEvaluatorConfig","content":"FsiEvaluatorConfig \n\n Provides configuration options for the FsiEvaluator\n \nFsiEvaluatorConfig.( .ctor ) \n( .ctor ) \nFsiEvaluatorConfig.CreateNoOpFsiObject \nCreateNoOpFsiObject"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluatorconfig.html#( .ctor )","title":"FsiEvaluatorConfig.( .ctor )","content":"FsiEvaluatorConfig.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-fsievaluatorconfig.html#CreateNoOpFsiObject","title":"FsiEvaluatorConfig.CreateNoOpFsiObject","content":"FsiEvaluatorConfig.CreateNoOpFsiObject \nCreateNoOpFsiObject \n\n Creates a dummy fsi object that does not affect the behaviour of F# Interactive\n (and simply ignores all operations that are done on it). You can use this to \n e.g. disable registered printers that would open new windows etc.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-ifsievaluationresult.html","title":"IFsiEvaluationResult","content":"IFsiEvaluationResult \n\n An interface that represents FSI evaluation result\n (we make this abstract so that evaluators can store other info)\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-ifsievaluator.html","title":"IFsiEvaluator","content":"IFsiEvaluator \n\n Represents an evaluator for F# snippets embedded in code\n \nIFsiEvaluator.Evaluate \nEvaluate \nIFsiEvaluator.Format \nFormat"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-ifsievaluator.html#Evaluate","title":"IFsiEvaluator.Evaluate","content":"IFsiEvaluator.Evaluate \nEvaluate \n\n Called to evaluate a snippet \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-literate-evaluation-ifsievaluator.html#Format","title":"IFsiEvaluator.Format","content":"IFsiEvaluator.Format \nFormat \n\n Called to format some part of evaluation result generated by FSI\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-dsl.html","title":"Dsl","content":"Dsl \n \nDsl.( # ) \n( # ) \nDsl.( ## ) \n( ## ) \nDsl.( ### ) \n( ### ) \nDsl.( #### ) \n( #### ) \nDsl.( ##### ) \n( ##### ) \nDsl.strong \nstrong \nDsl.p \np \nDsl.span \nspan \nDsl.( !! ) \n( !! ) \nDsl.link \nlink \nDsl.ul \nul \nDsl.ol \nol \nDsl.table \ntable \nDsl.img \nimg"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-dsl.html#( # )","title":"Dsl.( # )","content":"Dsl.( # ) \n( # ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-dsl.html#( ## )","title":"Dsl.( ## )","content":"Dsl.( ## ) \n( ## ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-dsl.html#( ### )","title":"Dsl.( ### )","content":"Dsl.( ### ) \n( ### ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-dsl.html#( #### )","title":"Dsl.( #### )","content":"Dsl.( #### ) \n( #### ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-dsl.html#( ##### )","title":"Dsl.( ##### )","content":"Dsl.( ##### ) \n( ##### ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-dsl.html#strong","title":"Dsl.strong","content":"Dsl.strong \nstrong \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-dsl.html#p","title":"Dsl.p","content":"Dsl.p \np \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-dsl.html#span","title":"Dsl.span","content":"Dsl.span \nspan \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-dsl.html#( !! )","title":"Dsl.( !! )","content":"Dsl.( !! ) \n( !! ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-dsl.html#link","title":"Dsl.link","content":"Dsl.link \nlink \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-dsl.html#ul","title":"Dsl.ul","content":"Dsl.ul \nul \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-dsl.html#ol","title":"Dsl.ol","content":"Dsl.ol \nol \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-dsl.html#table","title":"Dsl.table","content":"Dsl.table \ntable \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-dsl.html#img","title":"Dsl.img","content":"Dsl.img \nimg \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-htmlformatting.html","title":"HtmlFormatting","content":"HtmlFormatting \n\n [omit]\n \nHtmlFormatting.formatMarkdown \nformatMarkdown"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-htmlformatting.html#formatMarkdown","title":"HtmlFormatting.formatMarkdown","content":"HtmlFormatting.formatMarkdown \nformatMarkdown \n\n Format Markdown document and write the result to\n a specified TextWriter. Parameters specify newline character\n and a dictionary with link keys defined in the document.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownpatterns.html","title":"MarkdownPatterns","content":"MarkdownPatterns \n\n This module provides an easy way of processing Markdown documents.\n It lets you decompose documents into leafs and nodes with nested paragraphs.\n \nMarkdownPatterns.ParagraphLeafInfo \nParagraphLeafInfo \nMarkdownPatterns.ParagraphNestedInfo \nParagraphNestedInfo \nMarkdownPatterns.ParagraphSpansInfo \nParagraphSpansInfo \nMarkdownPatterns.SpanLeafInfo \nSpanLeafInfo \nMarkdownPatterns.SpanNodeInfo \nSpanNodeInfo \nMarkdownPatterns.SpanLeaf \nSpanLeaf \nMarkdownPatterns.SpanNode \nSpanNode \nMarkdownPatterns.ParagraphSpans \nParagraphSpans \nMarkdownPatterns.ParagraphLeaf \nParagraphLeaf \nMarkdownPatterns.ParagraphNested \nParagraphNested \nMarkdownPatterns.( |SpanLeaf|SpanNode| ) \n( |SpanLeaf|SpanNode| ) \nMarkdownPatterns.( |ParagraphLeaf|ParagraphNested|ParagraphSpans| ) \n( |ParagraphLeaf|ParagraphNested|ParagraphSpans| )"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownpatterns.html#SpanLeaf","title":"MarkdownPatterns.SpanLeaf","content":"MarkdownPatterns.SpanLeaf \nSpanLeaf \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownpatterns.html#SpanNode","title":"MarkdownPatterns.SpanNode","content":"MarkdownPatterns.SpanNode \nSpanNode \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownpatterns.html#ParagraphSpans","title":"MarkdownPatterns.ParagraphSpans","content":"MarkdownPatterns.ParagraphSpans \nParagraphSpans \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownpatterns.html#ParagraphLeaf","title":"MarkdownPatterns.ParagraphLeaf","content":"MarkdownPatterns.ParagraphLeaf \nParagraphLeaf \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownpatterns.html#ParagraphNested","title":"MarkdownPatterns.ParagraphNested","content":"MarkdownPatterns.ParagraphNested \nParagraphNested \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownpatterns.html#( |SpanLeaf|SpanNode| )","title":"MarkdownPatterns.( |SpanLeaf|SpanNode| )","content":"MarkdownPatterns.( |SpanLeaf|SpanNode| ) \n( |SpanLeaf|SpanNode| ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownpatterns.html#( |ParagraphLeaf|ParagraphNested|ParagraphSpans| )","title":"MarkdownPatterns.( |ParagraphLeaf|ParagraphNested|ParagraphSpans| )","content":"MarkdownPatterns.( |ParagraphLeaf|ParagraphNested|ParagraphSpans| ) \n( |ParagraphLeaf|ParagraphNested|ParagraphSpans| ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownpatterns-paragraphleafinfo.html","title":"ParagraphLeafInfo","content":"ParagraphLeafInfo \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownpatterns-paragraphnestedinfo.html","title":"ParagraphNestedInfo","content":"ParagraphNestedInfo \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownpatterns-paragraphspansinfo.html","title":"ParagraphSpansInfo","content":"ParagraphSpansInfo \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownpatterns-spanleafinfo.html","title":"SpanLeafInfo","content":"SpanLeafInfo \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownpatterns-spannodeinfo.html","title":"SpanNodeInfo","content":"SpanNodeInfo \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdown.html","title":"Markdown","content":"Markdown \n\n Static class that provides methods for formatting \n and transforming Markdown documents.\n \nMarkdown.Parse \nParse \nMarkdown.ToFsx \nToFsx \nMarkdown.ToHtml \nToHtml \nMarkdown.ToHtml \nToHtml \nMarkdown.ToLatex \nToLatex \nMarkdown.ToLatex \nToLatex \nMarkdown.ToMd \nToMd \nMarkdown.ToPynb \nToPynb \nMarkdown.WriteHtml \nWriteHtml \nMarkdown.WriteHtml \nWriteHtml \nMarkdown.WriteLatex \nWriteLatex \nMarkdown.WriteLatex \nWriteLatex"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdown.html#Parse","title":"Markdown.Parse","content":"Markdown.Parse \nParse \n\n Parse the specified text into a MarkdownDocument. Line breaks in the\n inline HTML (etc.) will be stored using the specified string.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdown.html#ToFsx","title":"Markdown.ToFsx","content":"Markdown.ToFsx \nToFsx \n\n Transform the provided MarkdownDocument into Fsx and return the result as a string.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdown.html#ToHtml","title":"Markdown.ToHtml","content":"Markdown.ToHtml \nToHtml \n\n Transform Markdown document into HTML format. \n The result will be returned as a string.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdown.html#ToHtml","title":"Markdown.ToHtml","content":"Markdown.ToHtml \nToHtml \n\n Transform the provided MarkdownDocument into HTML\n format and return the result as a string.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdown.html#ToLatex","title":"Markdown.ToLatex","content":"Markdown.ToLatex \nToLatex \n\n Transform Markdown text into LaTeX format. The result will be returned as a string.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdown.html#ToLatex","title":"Markdown.ToLatex","content":"Markdown.ToLatex \nToLatex \n\n Transform the provided MarkdownDocument into LaTeX\n format and return the result as a string.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdown.html#ToMd","title":"Markdown.ToMd","content":"Markdown.ToMd \nToMd \n\n Transform the provided MarkdownDocument into Md and return the result as a string.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdown.html#ToPynb","title":"Markdown.ToPynb","content":"Markdown.ToPynb \nToPynb \n\n Transform the provided MarkdownDocument into Pynb and return the result as a string.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdown.html#WriteHtml","title":"Markdown.WriteHtml","content":"Markdown.WriteHtml \nWriteHtml \n\n Transform Markdown text into HTML format. The result\n will be written to the provided TextWriter.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdown.html#WriteHtml","title":"Markdown.WriteHtml","content":"Markdown.WriteHtml \nWriteHtml \n\n Transform the provided MarkdownDocument into HTML\n format and write the result to a given writer.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdown.html#WriteLatex","title":"Markdown.WriteLatex","content":"Markdown.WriteLatex \nWriteLatex \n\n Transform Markdown document into LaTeX format. The result\n will be written to the provided TextWriter.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdown.html#WriteLatex","title":"Markdown.WriteLatex","content":"Markdown.WriteLatex \nWriteLatex \n\n Transform the provided MarkdownDocument into LaTeX\n format and write the result to a given writer.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdowncolumnalignment.html","title":"MarkdownColumnAlignment","content":"MarkdownColumnAlignment \n\n Column in a table can be aligned to left, right, center or using the default alignment\n \nMarkdownColumnAlignment.AlignLeft \nAlignLeft \nMarkdownColumnAlignment.AlignRight \nAlignRight \nMarkdownColumnAlignment.AlignCenter \nAlignCenter \nMarkdownColumnAlignment.AlignDefault \nAlignDefault"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdowncolumnalignment.html#AlignLeft","title":"MarkdownColumnAlignment.AlignLeft","content":"MarkdownColumnAlignment.AlignLeft \nAlignLeft \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdowncolumnalignment.html#AlignRight","title":"MarkdownColumnAlignment.AlignRight","content":"MarkdownColumnAlignment.AlignRight \nAlignRight \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdowncolumnalignment.html#AlignCenter","title":"MarkdownColumnAlignment.AlignCenter","content":"MarkdownColumnAlignment.AlignCenter \nAlignCenter \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdowncolumnalignment.html#AlignDefault","title":"MarkdownColumnAlignment.AlignDefault","content":"MarkdownColumnAlignment.AlignDefault \nAlignDefault \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdowndocument.html","title":"MarkdownDocument","content":"MarkdownDocument \n\n Representation of a Markdown document - the representation of Paragraphs\n uses an F# discriminated union type and so is best used from F#.\n  \nMarkdownDocument.( .ctor ) \n( .ctor ) \nMarkdownDocument.DefinedLinks \nDefinedLinks \nMarkdownDocument.Paragraphs \nParagraphs"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdowndocument.html#( .ctor )","title":"MarkdownDocument.( .ctor )","content":"MarkdownDocument.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdowndocument.html#DefinedLinks","title":"MarkdownDocument.DefinedLinks","content":"MarkdownDocument.DefinedLinks \nDefinedLinks \n\n Returns a dictionary containing explicitly defined links\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdowndocument.html#Paragraphs","title":"MarkdownDocument.Paragraphs","content":"MarkdownDocument.Paragraphs \nParagraphs \n\n Returns a list of paragraphs in the document\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownembedparagraphs.html","title":"MarkdownEmbedParagraphs","content":"MarkdownEmbedParagraphs \n\n Provides an extensibility point for adding custom kinds of paragraphs into a document\n (MarkdownEmbedParagraphs values can be embedded using MarkdownParagraph.EmbedParagraphs)\n \nMarkdownEmbedParagraphs.Render \nRender"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownembedparagraphs.html#Render","title":"MarkdownEmbedParagraphs.Render","content":"MarkdownEmbedParagraphs.Render \nRender \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownembedspans.html","title":"MarkdownEmbedSpans","content":"MarkdownEmbedSpans \n\n Provides an extensibility point for adding custom kinds of spans into a document\n (MarkdownEmbedSpans values can be embedded using MarkdownSpan.EmbedSpans)\n \nMarkdownEmbedSpans.Render \nRender"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownembedspans.html#Render","title":"MarkdownEmbedSpans.Render","content":"MarkdownEmbedSpans.Render \nRender \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownlistkind.html","title":"MarkdownListKind","content":"MarkdownListKind \n\n   A list kind can be Ordered or Unordered corresponding to \u003Ccode\u003E\u003Col\u003E\u003C/code\u003E and \u003Ccode\u003E\u003Cul\u003E\u003C/code\u003E elements\n  \nMarkdownListKind.Ordered \nOrdered \nMarkdownListKind.Unordered \nUnordered"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownlistkind.html#Ordered","title":"MarkdownListKind.Ordered","content":"MarkdownListKind.Ordered \nOrdered \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownlistkind.html#Unordered","title":"MarkdownListKind.Unordered","content":"MarkdownListKind.Unordered \nUnordered \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraph.html","title":"MarkdownParagraph","content":"MarkdownParagraph \n\n A paragraph represents a (possibly) multi-line element of a Markdown document.\n Paragraphs are headings, inline paragraphs, code blocks, lists, quotations, tables and\n also embedded LaTeX blocks.\n \nMarkdownParagraph.Heading \nHeading \nMarkdownParagraph.Paragraph \nParagraph \nMarkdownParagraph.CodeBlock \nCodeBlock \nMarkdownParagraph.InlineHtmlBlock \nInlineHtmlBlock \nMarkdownParagraph.ListBlock \nListBlock \nMarkdownParagraph.QuotedBlock \nQuotedBlock \nMarkdownParagraph.Span \nSpan \nMarkdownParagraph.LatexBlock \nLatexBlock \nMarkdownParagraph.HorizontalRule \nHorizontalRule \nMarkdownParagraph.TableBlock \nTableBlock \nMarkdownParagraph.OtherBlock \nOtherBlock \nMarkdownParagraph.EmbedParagraphs \nEmbedParagraphs \nMarkdownParagraph.YamlFrontmatter \nYamlFrontmatter \nMarkdownParagraph.OutputBlock \nOutputBlock"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraph.html#Heading","title":"MarkdownParagraph.Heading","content":"MarkdownParagraph.Heading \nHeading \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraph.html#Paragraph","title":"MarkdownParagraph.Paragraph","content":"MarkdownParagraph.Paragraph \nParagraph \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraph.html#CodeBlock","title":"MarkdownParagraph.CodeBlock","content":"MarkdownParagraph.CodeBlock \nCodeBlock \n\n A code block, whether fenced or via indentation\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraph.html#InlineHtmlBlock","title":"MarkdownParagraph.InlineHtmlBlock","content":"MarkdownParagraph.InlineHtmlBlock \nInlineHtmlBlock \n\n A HTML block\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraph.html#ListBlock","title":"MarkdownParagraph.ListBlock","content":"MarkdownParagraph.ListBlock \nListBlock \n\n A Markdown List block\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraph.html#QuotedBlock","title":"MarkdownParagraph.QuotedBlock","content":"MarkdownParagraph.QuotedBlock \nQuotedBlock \n\n A Markdown Quote block\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraph.html#Span","title":"MarkdownParagraph.Span","content":"MarkdownParagraph.Span \nSpan \n\n A Markdown Span block\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraph.html#LatexBlock","title":"MarkdownParagraph.LatexBlock","content":"MarkdownParagraph.LatexBlock \nLatexBlock \n\n A Markdown Latex block\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraph.html#HorizontalRule","title":"MarkdownParagraph.HorizontalRule","content":"MarkdownParagraph.HorizontalRule \nHorizontalRule \n\n A Markdown Horizontal rule\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraph.html#TableBlock","title":"MarkdownParagraph.TableBlock","content":"MarkdownParagraph.TableBlock \nTableBlock \n\n A Markdown Table\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraph.html#OtherBlock","title":"MarkdownParagraph.OtherBlock","content":"MarkdownParagraph.OtherBlock \nOtherBlock \n\n Represents a block of markdown produced when parsing of code or tables or quoted blocks is suppressed\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraph.html#EmbedParagraphs","title":"MarkdownParagraph.EmbedParagraphs","content":"MarkdownParagraph.EmbedParagraphs \nEmbedParagraphs \n\n A special addition for computing paragraphs\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraph.html#YamlFrontmatter","title":"MarkdownParagraph.YamlFrontmatter","content":"MarkdownParagraph.YamlFrontmatter \nYamlFrontmatter \n\n A special addition for YAML-style frontmatter\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraph.html#OutputBlock","title":"MarkdownParagraph.OutputBlock","content":"MarkdownParagraph.OutputBlock \nOutputBlock \n\n A special addition for inserted outputs\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraphs.html","title":"MarkdownParagraphs","content":"MarkdownParagraphs \n\n A type alias for a list of paragraphs\n \nMarkdownParagraphs.IsEmpty \nIsEmpty \nMarkdownParagraphs.Tail \nTail \nMarkdownParagraphs.Item \nItem \nMarkdownParagraphs.Head \nHead \nMarkdownParagraphs.Length \nLength \nMarkdownParagraphs.Empty \nEmpty"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraphs.html#IsEmpty","title":"MarkdownParagraphs.IsEmpty","content":"MarkdownParagraphs.IsEmpty \nIsEmpty \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraphs.html#Tail","title":"MarkdownParagraphs.Tail","content":"MarkdownParagraphs.Tail \nTail \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraphs.html#Item","title":"MarkdownParagraphs.Item","content":"MarkdownParagraphs.Item \nItem \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraphs.html#Head","title":"MarkdownParagraphs.Head","content":"MarkdownParagraphs.Head \nHead \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraphs.html#Length","title":"MarkdownParagraphs.Length","content":"MarkdownParagraphs.Length \nLength \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparagraphs.html#Empty","title":"MarkdownParagraphs.Empty","content":"MarkdownParagraphs.Empty \nEmpty \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparseoptions.html","title":"MarkdownParseOptions","content":"MarkdownParseOptions \n\n Controls the parsing of markdown\n \nMarkdownParseOptions.None \nNone \nMarkdownParseOptions.ParseCodeAsOther \nParseCodeAsOther \nMarkdownParseOptions.ParseNonCodeAsOther \nParseNonCodeAsOther \nMarkdownParseOptions.AllowYamlFrontMatter \nAllowYamlFrontMatter"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparseoptions.html#None","title":"MarkdownParseOptions.None","content":"MarkdownParseOptions.None \nNone \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparseoptions.html#ParseCodeAsOther","title":"MarkdownParseOptions.ParseCodeAsOther","content":"MarkdownParseOptions.ParseCodeAsOther \nParseCodeAsOther \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparseoptions.html#ParseNonCodeAsOther","title":"MarkdownParseOptions.ParseNonCodeAsOther","content":"MarkdownParseOptions.ParseNonCodeAsOther \nParseNonCodeAsOther \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownparseoptions.html#AllowYamlFrontMatter","title":"MarkdownParseOptions.AllowYamlFrontMatter","content":"MarkdownParseOptions.AllowYamlFrontMatter \nAllowYamlFrontMatter \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspan.html","title":"MarkdownSpan","content":"MarkdownSpan \n\n Represents inline formatting inside a paragraph. This can be literal (with text), various\n formattings (string, emphasis, etc.), hyperlinks, images, inline maths etc.\n \nMarkdownSpan.Literal \nLiteral \nMarkdownSpan.InlineCode \nInlineCode \nMarkdownSpan.Strong \nStrong \nMarkdownSpan.Emphasis \nEmphasis \nMarkdownSpan.AnchorLink \nAnchorLink \nMarkdownSpan.DirectLink \nDirectLink \nMarkdownSpan.IndirectLink \nIndirectLink \nMarkdownSpan.DirectImage \nDirectImage \nMarkdownSpan.IndirectImage \nIndirectImage \nMarkdownSpan.HardLineBreak \nHardLineBreak \nMarkdownSpan.LatexInlineMath \nLatexInlineMath \nMarkdownSpan.LatexDisplayMath \nLatexDisplayMath \nMarkdownSpan.EmbedSpans \nEmbedSpans"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspan.html#Literal","title":"MarkdownSpan.Literal","content":"MarkdownSpan.Literal \nLiteral \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspan.html#InlineCode","title":"MarkdownSpan.InlineCode","content":"MarkdownSpan.InlineCode \nInlineCode \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspan.html#Strong","title":"MarkdownSpan.Strong","content":"MarkdownSpan.Strong \nStrong \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspan.html#Emphasis","title":"MarkdownSpan.Emphasis","content":"MarkdownSpan.Emphasis \nEmphasis \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspan.html#AnchorLink","title":"MarkdownSpan.AnchorLink","content":"MarkdownSpan.AnchorLink \nAnchorLink \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspan.html#DirectLink","title":"MarkdownSpan.DirectLink","content":"MarkdownSpan.DirectLink \nDirectLink \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspan.html#IndirectLink","title":"MarkdownSpan.IndirectLink","content":"MarkdownSpan.IndirectLink \nIndirectLink \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspan.html#DirectImage","title":"MarkdownSpan.DirectImage","content":"MarkdownSpan.DirectImage \nDirectImage \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspan.html#IndirectImage","title":"MarkdownSpan.IndirectImage","content":"MarkdownSpan.IndirectImage \nIndirectImage \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspan.html#HardLineBreak","title":"MarkdownSpan.HardLineBreak","content":"MarkdownSpan.HardLineBreak \nHardLineBreak \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspan.html#LatexInlineMath","title":"MarkdownSpan.LatexInlineMath","content":"MarkdownSpan.LatexInlineMath \nLatexInlineMath \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspan.html#LatexDisplayMath","title":"MarkdownSpan.LatexDisplayMath","content":"MarkdownSpan.LatexDisplayMath \nLatexDisplayMath \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspan.html#EmbedSpans","title":"MarkdownSpan.EmbedSpans","content":"MarkdownSpan.EmbedSpans \nEmbedSpans \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspans.html","title":"MarkdownSpans","content":"MarkdownSpans \n\n A type alias for a list of MarkdownSpan values\n \nMarkdownSpans.IsEmpty \nIsEmpty \nMarkdownSpans.Tail \nTail \nMarkdownSpans.Item \nItem \nMarkdownSpans.Head \nHead \nMarkdownSpans.Length \nLength \nMarkdownSpans.Empty \nEmpty"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspans.html#IsEmpty","title":"MarkdownSpans.IsEmpty","content":"MarkdownSpans.IsEmpty \nIsEmpty \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspans.html#Tail","title":"MarkdownSpans.Tail","content":"MarkdownSpans.Tail \nTail \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspans.html#Item","title":"MarkdownSpans.Item","content":"MarkdownSpans.Item \nItem \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspans.html#Head","title":"MarkdownSpans.Head","content":"MarkdownSpans.Head \nHead \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspans.html#Length","title":"MarkdownSpans.Length","content":"MarkdownSpans.Length \nLength \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownspans.html#Empty","title":"MarkdownSpans.Empty","content":"MarkdownSpans.Empty \nEmpty \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdowntablerow.html","title":"MarkdownTableRow","content":"MarkdownTableRow \n\n A type alias representing table row as a list of paragraphs\n \nMarkdownTableRow.IsEmpty \nIsEmpty \nMarkdownTableRow.Tail \nTail \nMarkdownTableRow.Item \nItem \nMarkdownTableRow.Head \nHead \nMarkdownTableRow.Length \nLength \nMarkdownTableRow.Empty \nEmpty"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdowntablerow.html#IsEmpty","title":"MarkdownTableRow.IsEmpty","content":"MarkdownTableRow.IsEmpty \nIsEmpty \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdowntablerow.html#Tail","title":"MarkdownTableRow.Tail","content":"MarkdownTableRow.Tail \nTail \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdowntablerow.html#Item","title":"MarkdownTableRow.Item","content":"MarkdownTableRow.Item \nItem \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdowntablerow.html#Head","title":"MarkdownTableRow.Head","content":"MarkdownTableRow.Head \nHead \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdowntablerow.html#Length","title":"MarkdownTableRow.Length","content":"MarkdownTableRow.Length \nLength \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdowntablerow.html#Empty","title":"MarkdownTableRow.Empty","content":"MarkdownTableRow.Empty \nEmpty \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownrangemodule.html","title":"MarkdownRange","content":"MarkdownRange \n \nMarkdownRange.zero \nzero \nMarkdownRange.mergeRanges \nmergeRanges"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownrangemodule.html#zero","title":"MarkdownRange.zero","content":"MarkdownRange.zero \nzero \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownrangemodule.html#mergeRanges","title":"MarkdownRange.mergeRanges","content":"MarkdownRange.mergeRanges \nmergeRanges \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownrange.html","title":"MarkdownRange","content":"MarkdownRange \n \nMarkdownRange.StartLine \nStartLine \nMarkdownRange.StartColumn \nStartColumn \nMarkdownRange.EndLine \nEndLine \nMarkdownRange.EndColumn \nEndColumn"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownrange.html#StartLine","title":"MarkdownRange.StartLine","content":"MarkdownRange.StartLine \nStartLine \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownrange.html#StartColumn","title":"MarkdownRange.StartColumn","content":"MarkdownRange.StartColumn \nStartColumn \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownrange.html#EndLine","title":"MarkdownRange.EndLine","content":"MarkdownRange.EndLine \nEndLine \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-markdown-markdownrange.html#EndColumn","title":"MarkdownRange.EndColumn","content":"MarkdownRange.EndColumn \nEndColumn \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html","title":"ParamKeys","content":"ParamKeys \n\n  Defines the parameter keys known to FSharp.Formatting processing code\n  \nParamKeys.root \nroot \nParamKeys.( fsdocs-authors ) \n( fsdocs-authors ) \nParamKeys.( fsdocs-collection-name ) \n( fsdocs-collection-name ) \nParamKeys.( fsdocs-content ) \n( fsdocs-content ) \nParamKeys.( fsdocs-collection-name-link ) \n( fsdocs-collection-name-link ) \nParamKeys.( fsdocs-copyright ) \n( fsdocs-copyright ) \nParamKeys.( fsdocs-license-link ) \n( fsdocs-license-link ) \nParamKeys.( fsdocs-list-of-namespaces ) \n( fsdocs-list-of-namespaces ) \nParamKeys.( fsdocs-list-of-documents ) \n( fsdocs-list-of-documents ) \nParamKeys.( fsdocs-logo-link ) \n( fsdocs-logo-link ) \nParamKeys.( fsdocs-logo-src ) \n( fsdocs-logo-src ) \nParamKeys.( fsdocs-navbar-position ) \n( fsdocs-navbar-position ) \nParamKeys.( fsdocs-package-license-expression ) \n( fsdocs-package-license-expression ) \nParamKeys.( fsdocs-package-project-url ) \n( fsdocs-package-project-url ) \nParamKeys.( fsdocs-package-tags ) \n( fsdocs-package-tags ) \nParamKeys.( fsdocs-package-version ) \n( fsdocs-package-version ) \nParamKeys.( fsdocs-package-icon-url ) \n( fsdocs-package-icon-url ) \nParamKeys.( fsdocs-page-title ) \n( fsdocs-page-title ) \nParamKeys.( fsdocs-page-source ) \n( fsdocs-page-source ) \nParamKeys.( fsdocs-release-notes-link ) \n( fsdocs-release-notes-link ) \nParamKeys.( fsdocs-repository-branch ) \n( fsdocs-repository-branch ) \nParamKeys.( fsdocs-repository-commit ) \n( fsdocs-repository-commit ) \nParamKeys.( fsdocs-repository-link ) \n( fsdocs-repository-link ) \nParamKeys.( fsdocs-source ) \n( fsdocs-source ) \nParamKeys.( fsdocs-source-filename ) \n( fsdocs-source-filename ) \nParamKeys.( fsdocs-source-basename ) \n( fsdocs-source-basename ) \nParamKeys.( fsdocs-theme ) \n( fsdocs-theme ) \nParamKeys.( fsdocs-tooltips ) \n( fsdocs-tooltips ) \nParamKeys.( fsdocs-watch-script ) \n( fsdocs-watch-script )"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#root","title":"ParamKeys.root","content":"ParamKeys.root \nroot \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-authors )","title":"ParamKeys.( fsdocs-authors )","content":"ParamKeys.( fsdocs-authors ) \n( fsdocs-authors ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-collection-name )","title":"ParamKeys.( fsdocs-collection-name )","content":"ParamKeys.( fsdocs-collection-name ) \n( fsdocs-collection-name ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-content )","title":"ParamKeys.( fsdocs-content )","content":"ParamKeys.( fsdocs-content ) \n( fsdocs-content ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-collection-name-link )","title":"ParamKeys.( fsdocs-collection-name-link )","content":"ParamKeys.( fsdocs-collection-name-link ) \n( fsdocs-collection-name-link ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-copyright )","title":"ParamKeys.( fsdocs-copyright )","content":"ParamKeys.( fsdocs-copyright ) \n( fsdocs-copyright ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-license-link )","title":"ParamKeys.( fsdocs-license-link )","content":"ParamKeys.( fsdocs-license-link ) \n( fsdocs-license-link ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-list-of-namespaces )","title":"ParamKeys.( fsdocs-list-of-namespaces )","content":"ParamKeys.( fsdocs-list-of-namespaces ) \n( fsdocs-list-of-namespaces ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-list-of-documents )","title":"ParamKeys.( fsdocs-list-of-documents )","content":"ParamKeys.( fsdocs-list-of-documents ) \n( fsdocs-list-of-documents ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-logo-link )","title":"ParamKeys.( fsdocs-logo-link )","content":"ParamKeys.( fsdocs-logo-link ) \n( fsdocs-logo-link ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-logo-src )","title":"ParamKeys.( fsdocs-logo-src )","content":"ParamKeys.( fsdocs-logo-src ) \n( fsdocs-logo-src ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-navbar-position )","title":"ParamKeys.( fsdocs-navbar-position )","content":"ParamKeys.( fsdocs-navbar-position ) \n( fsdocs-navbar-position ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-package-license-expression )","title":"ParamKeys.( fsdocs-package-license-expression )","content":"ParamKeys.( fsdocs-package-license-expression ) \n( fsdocs-package-license-expression ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-package-project-url )","title":"ParamKeys.( fsdocs-package-project-url )","content":"ParamKeys.( fsdocs-package-project-url ) \n( fsdocs-package-project-url ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-package-tags )","title":"ParamKeys.( fsdocs-package-tags )","content":"ParamKeys.( fsdocs-package-tags ) \n( fsdocs-package-tags ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-package-version )","title":"ParamKeys.( fsdocs-package-version )","content":"ParamKeys.( fsdocs-package-version ) \n( fsdocs-package-version ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-package-icon-url )","title":"ParamKeys.( fsdocs-package-icon-url )","content":"ParamKeys.( fsdocs-package-icon-url ) \n( fsdocs-package-icon-url ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-page-title )","title":"ParamKeys.( fsdocs-page-title )","content":"ParamKeys.( fsdocs-page-title ) \n( fsdocs-page-title ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-page-source )","title":"ParamKeys.( fsdocs-page-source )","content":"ParamKeys.( fsdocs-page-source ) \n( fsdocs-page-source ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-release-notes-link )","title":"ParamKeys.( fsdocs-release-notes-link )","content":"ParamKeys.( fsdocs-release-notes-link ) \n( fsdocs-release-notes-link ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-repository-branch )","title":"ParamKeys.( fsdocs-repository-branch )","content":"ParamKeys.( fsdocs-repository-branch ) \n( fsdocs-repository-branch ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-repository-commit )","title":"ParamKeys.( fsdocs-repository-commit )","content":"ParamKeys.( fsdocs-repository-commit ) \n( fsdocs-repository-commit ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-repository-link )","title":"ParamKeys.( fsdocs-repository-link )","content":"ParamKeys.( fsdocs-repository-link ) \n( fsdocs-repository-link ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-source )","title":"ParamKeys.( fsdocs-source )","content":"ParamKeys.( fsdocs-source ) \n( fsdocs-source ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-source-filename )","title":"ParamKeys.( fsdocs-source-filename )","content":"ParamKeys.( fsdocs-source-filename ) \n( fsdocs-source-filename ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-source-basename )","title":"ParamKeys.( fsdocs-source-basename )","content":"ParamKeys.( fsdocs-source-basename ) \n( fsdocs-source-basename ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-theme )","title":"ParamKeys.( fsdocs-theme )","content":"ParamKeys.( fsdocs-theme ) \n( fsdocs-theme ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-tooltips )","title":"ParamKeys.( fsdocs-tooltips )","content":"ParamKeys.( fsdocs-tooltips ) \n( fsdocs-tooltips ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkeys.html#( fsdocs-watch-script )","title":"ParamKeys.( fsdocs-watch-script )","content":"ParamKeys.( fsdocs-watch-script ) \n( fsdocs-watch-script ) \n\n A parameter key known to FSharp.Formatting\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkey.html","title":"ParamKey","content":"ParamKey \n\n A parameter key\n  \nParamKey.ParamKey \nParamKey"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-paramkey.html#ParamKey","title":"ParamKey.ParamKey","content":"ParamKey.ParamKey \nParamKey \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-substitutions.html","title":"Substitutions","content":"Substitutions \n\n A list of parameters for substituting in templates, indexed by parameter keys\n \nSubstitutions.IsEmpty \nIsEmpty \nSubstitutions.Tail \nTail \nSubstitutions.Item \nItem \nSubstitutions.Head \nHead \nSubstitutions.Length \nLength \nSubstitutions.Empty \nEmpty"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-substitutions.html#IsEmpty","title":"Substitutions.IsEmpty","content":"Substitutions.IsEmpty \nIsEmpty \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-substitutions.html#Tail","title":"Substitutions.Tail","content":"Substitutions.Tail \nTail \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-substitutions.html#Item","title":"Substitutions.Item","content":"Substitutions.Item \nItem \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-substitutions.html#Head","title":"Substitutions.Head","content":"Substitutions.Head \nHead \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-substitutions.html#Length","title":"Substitutions.Length","content":"Substitutions.Length \nLength \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/reference/fsharp-formatting-templating-substitutions.html#Empty","title":"Substitutions.Empty","content":"Substitutions.Empty \nEmpty \n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/upgrade.html","title":"Upgrading to fsdocs\n","content":"---\ncategory: Advanced\ncategoryindex: 3\nindex: 1\n---\n\n# Upgrading to fsdocs\n\nHere are the typical steps to upgrade a repo based on \u0060ProjectScaffold\u0060 to use \u0060fsdocs\u0060\n\n1. Run\n\n       [lang=text]\n       dotnet new tool\n       dotnet tool install FSharp.Formatting.CommandTool\n\n2. Delete all of \u0060docs\\tools\u0060 particularly \u0060docs\\tool\\generate.fsx\u0060.  Keep a copy of any templates for reference as you\u0027ll have to copy some bits across to the new template.\n\n3. Put your docs directory so it reflects the final shape of the site. For example move the content of \u0060docs\\input\\*\u0060 and \u0060docs\\files\\*\u0060 directly to \u0060docs\\*\u0060\n\n4. Follow the notes in [styling](styling.html) to start to style your site.\n\n5. Run\n\n       [lang=text]\n       dotnet fsdocs watch\n\n   and edit and test your docs.\n\n6. If using FAKE adjust \u0060build.fsx\u0060 e.g.\n\n       [lang=text]\n       Target.create \u0022GenerateDocs\u0022 (fun _ -\u003E\n          Shell.cleanDir \u0022.fsdocs\u0022\n          DotNet.exec id \u0022fsdocs\u0022 \u0022build --clean\u0022 |\u003E ignore\n       )\n       \n       Target.create \u0022ReleaseDocs\u0022 (fun _ -\u003E\n           Git.Repository.clone \u0022\u0022 projectRepo \u0022temp/gh-pages\u0022\n           Git.Branches.checkoutBranch \u0022temp/gh-pages\u0022 \u0022gh-pages\u0022\n           Shell.copyRecursive \u0022output\u0022 \u0022temp/gh-pages\u0022 true |\u003E printfn \u0022%A\u0022\n           Git.CommandHelper.runSimpleGitCommand \u0022temp/gh-pages\u0022 \u0022add .\u0022 |\u003E printfn \u0022%s\u0022\n           let cmd = sprintf \u0022\u0022\u0022commit -a -m \u0022Update generated documentation for version %s\u0022\u0022\u0022 release.NugetVersion\n           Git.CommandHelper.runSimpleGitCommand \u0022temp/gh-pages\u0022 cmd |\u003E printfn \u0022%s\u0022\n           Git.Branches.push \u0022temp/gh-pages\u0022\n       )\n\n7. Consider creating \u0060docs\\_template.fsx\u0060 and \u0060docs\\_template.ipynb\u0060 to enable co-generation of F# scripts and F# notebooks.\n\n   If you add support for notebooks and scripts, consider adding mybinder links to each of your literate executable content pages. For example [like this](https://github.com/fsprojects/FSharp.Formatting/blob/master/docs/literate.fsx#L19).\n\n   Also add load sections to make sure your notebooks and scripts contain the right content to load packages out of repo.  For example [like this](https://github.com/fsprojects/FSharp.Formatting/blob/master/docs/literate.fsx#L1).\n\nSample commands: \n\n    [lang=text]\n    dotnet tool install FSharp.Formatting.CommandTool --local\n    git add dotnet-tools.json   \n    git rm -fr docs/tools\n    git mv docs/input/* docs\n    git mv docs/files/* docs\n    \n    \u003Cmanually download and fixup the _template.html\u003E\n\n    dotnet fsdocs watch\n\n    touch docs/_template.fsx\n    touch docs/_template.ipynb\n    git add docs/_template.fsx\n    git add docs/_template.ipynb\n\nHere is an example PR: https://github.com/fsprojects/FSharp.Control.AsyncSeq/pull/116\n\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/apidocs.html","title":"Generating API Docs","content":"(**\n---\ntitle: Generating API Docs\ncategory: Documentation\ncategoryindex: 1\nindex: 5\n---\n*)\n(*** condition: prepare ***)\n#nowarn \u0022211\u0022\n#I \u0022../src/FSharp.Formatting/bin/Release/netstandard2.1\u0022\n#r \u0022FSharp.Formatting.Common.dll\u0022\n#r \u0022FSharp.Formatting.Markdown.dll\u0022\n#r \u0022FSharp.Formatting.CodeFormat.dll\u0022\n#r \u0022FSharp.Formatting.Literate.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Formatting,{{package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Formatting,{{package-version}}\u0022\n#endif // IPYNB\n\n(*** hide ***)\nlet root = \u0022C:\\\\\u0022\n\n(**\n[![Binder](img/badge-binder.svg)](https://mybinder.org/v2/gh/fsprojects/fsharp.formatting/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](img/badge-script.svg)]({{root}}/{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](img/badge-notebook.svg)]({{root}}/{{fsdocs-source-basename}}.ipynb)\n\nAPI Documentation Generation\n====================================\n\nThe [command-line tool \u0060fsdocs\u0060](commandline.html) can be used to generate documentation\nfor F# libraries with XML comments.  The documentation is normally built using \u0060fsdocs build\u0060 and developed using \u0060fsdocs watch\u0060. For\nthe former the output will be placed in \u0060output\\reference\u0060 by default.\n\n## Templates\n\nThe HTML is built by instantiating a template. The template used is the first of:\n\n* \u0060docs/reference/_template.html\u0060\n\n* \u0060docs/_template.html\u0060\n\n* The default template\n\nUsually the same template can be used as for [other content](content.html).\n\n## Classic XML Doc Comments\n\nXML Doc Comments may use [the normal F# and C# XML doc standards](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/).\n\nThe tags that form the core of the XML doc specification are:\n\n\u0060\u0060\u0060\n\u003Cc\u003E\t\u003Cpara\u003E\t\u003Csee\u003E*\t\u003Cvalue\u003E\n\u003Ccode\u003E\t\u003Cparam\u003E*\t\u003Cseealso\u003E*\n\u003Cexample\u003E\t\u003Cparamref\u003E\t\u003Csummary\u003E\n\u003Cexception\u003E*\t\u003Cpermission\u003E*\t\u003Ctypeparam\u003E*\n\u003Cinclude\u003E*\t\u003Cremarks\u003E\t\u003Ctypeparamref\u003E\n\u003Clist\u003E\t\u003Cinheritdoc\u003E\t\u003Creturns\u003E\n\u0060\u0060\u0060\n\nIn addition, you may also use the [Recommended XML doc extensions for F# documentation tooling](https://github.com/fsharp/fslang-design/blob/master/tooling/FST-1031-xmldoc-extensions.md).\n\n* \u0060\u003Ca href = \u0022...\u0022\u003E\u0060 links\n\n* Arbitrary paragraph-level HTML such as \u0060\u003Cb\u003E\u0060 for bold in XML doc text\n\n* \u0060\u003Cnamespacedoc\u003E\u0060 giving documentation for the enclosing namespace\n\n* \u0060\u003Cexclude\u003E\u0060 to exclude from XML docs\n\n* \u0060\u003Ccategory\u003E\u0060 to give a category for an entity or member. An optional \u0060index\u0060 attribute can be specified\n  to help sort the list of categories.\n\n* \u0060\\(...\\)\u0060 for inline math and \u0060$$...$$\u0060 and \u0060\\[...\\]\u0060for math environments, see http://docs.mathjax.org.\n  Some escaping of characters (e.g. \u0060\u0026lt;\u0060, \u0060\u0026gt;\u0060) may be needed to form valid XML\n\nAn example of an XML documentation comment, assuming the code is in namespace \u0060TheNamespace\u0060:\n*)\n/// \u003Csummary\u003E\n///   A module\n/// \u003C/summary\u003E\n///\n/// \u003Cnamespacedoc\u003E\n///   \u003Csummary\u003EA namespace to remember\u003C/summary\u003E\n///\n///   \u003Cremarks\u003EMore on that\u003C/remarks\u003E\n/// \u003C/namespacedoc\u003E\n///\nmodule SomeModule =\n    /// \u003Csummary\u003E\n    ///   Some actual comment\n    ///   \u003Cpara\u003EAnother paragraph, see  \u003Csee cref=\u0022T:TheNamespace.SomeType\u0022/\u003E. \u003C/para\u003E\n    /// \u003C/summary\u003E\n    ///\n    /// \u003Cparam name=\u0022x\u0022\u003EThe input\u003C/param\u003E\n    ///\n    /// \u003Creturns\u003EThe output\u003C/returns\u003E\n    ///\n    /// \u003Cexample\u003E\n    ///   Try using\n    ///   \u003Ccode\u003E\n    ///      open TheNamespace\n    ///      SomeModule.a\n    ///   \u003C/code\u003E\n    /// \u003C/example\u003E\n    ///\n    /// \u003Ccategory\u003EFoo\u003C/category\u003E\n   let someFunction x = 42 \u002B x\n\n/// \u003Csummary\u003E\n///   A type, see  \u003Csee cref=\u0022T:TheNamespace.SomeModule\u0022/\u003E and\n///  \u003Csee cref=\u0022M:TheNamespace.SomeModule.someFunction\u0022/\u003E.\n/// \u003C/summary\u003E\n///\ntype SomeType() =\n   member x.P = 1\n\n(**\n\nLike types, members are referred to by xml doc sig.  These must currently be precise as the F#\ncompiler doesn\u0027t elaborate these references from simpler names:\n*)\n\ntype Class2() =\n    member this.Property = \u0022more\u0022\n    member this.Method0() = \u0022more\u0022\n    member this.Method1(c: string) = \u0022more\u0022\n    member this.Method2(c: string, o: obj) = \u0022more\u0022\n\n/// \u003Csee cref=\u0022P:TheNamespace.Class2.Property\u0022 /\u003E\n/// and \u003Csee cref=\u0022M:TheNamespace.Class2.OtherMethod0\u0022 /\u003E\n/// and \u003Csee cref=\u0022M:TheNamespace.Class2.Method1(System.String)\u0022 /\u003E\n/// and \u003Csee cref=\u0022M:TheNamespace.Class2.Method2(System.String,System.Object)\u0022 /\u003E\nlet referringFunction1 () = \u0022result\u0022\n\n(**\nGeneric types are referred to by .NET compiled name, e.g.\n*)\n\ntype GenericClass2\u003C\u0027T\u003E() =\n    member this.Property = \u0022more\u0022\n\n    member this.NonGenericMethod(_c: \u0027T) = \u0022more\u0022\n\n    member this.GenericMethod(_c: \u0027T, _o: \u0027U) = \u0022more\u0022\n\n/// See \u003Csee cref=\u0022T:TheNamespace.GenericClass2\u00601\u0022 /\u003E\n/// and \u003Csee cref=\u0022P:TheNamespace.GenericClass2\u00601.Property\u0022 /\u003E\n/// and \u003Csee cref=\u0022M:TheNamespace.GenericClass2\u00601.NonGenericMethod(\u00600)\u0022 /\u003E\n/// and \u003Csee cref=\u0022M:TheNamespace.GenericClass2\u00601.GenericMethod\u0060\u00601(\u00600,\u0060\u00600)\u0022 /\u003E\nlet referringFunction2 () = \u0022result\u0022\n\n(*\n\n## Go to Source links\n\n\u0027fsdocs\u0027 normally automatically adds GitHub links to each functions, values and class members for further reference.\n\nThis is normally done automatically based on the following settings:\n\n    \u003CRepositoryUrl\u003Ehttps://github.com/...\u003C/RepositoryUrl\u003E\n    \u003CRepositoryBranch\u003E...\u003C/RepositoryBranch\u003E\n    \u003CRepositoryType\u003Egit\u003C/RepositoryType\u003E\n\nIf your source is not built from the same project where you are building documentation then\nyou may need these settings:\n\n    \u003CFsDocsSourceRepository\u003E...\u003C/FsDocsSourceRepository\u003E -- the URL for the root of the source\n    \u003CFsDocsSourceFolder\u003E...\u003C/FsDocsSourceFolder\u003E         -- the root soure folder at time of build\n\nIt is assumed that \u0060sourceRepo\u0060 and \u0060sourceFolder\u0060 have synchronized contents.\n\n## Markdown Comments\n\nYou can use Markdown instead of XML in \u0060///\u0060 comments. If you do, you should set \u0060\u003CUsesMarkdownComments\u003E\u0060 in\nyour F# project file.\n\n\u003E Note: Markdown Comments are not supported in all F# IDE tooling.\n\n### Adding cross-type links to modules and types in the same assembly\n\nYou can automatically add cross-type links to the documentation pages of other modules and types in the same assembly.\nYou can do this in two different ways:\n\n* Add a [markdown inline link](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#links) were the link\ntitle is the name of the type you want to link.\n\n      /// this will generate a link to [Foo.Bar] documentation\n\n* Add a [Markdown inline code](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#code) (using\nback-ticks) where the code is the name of the type you want to link.\n\n      /// This will also generate a link to \u0060Foo.Bar\u0060 documentation\n\nYou can use either the full name (including namespace and module) or the simple name of a type.\nIf more than one type is found with the same name the link will not be generated.\nIf a type with the given name is not found in the same assembly the link will not be generated.\n*)\n\n/// Contains two types [Bar] and [Foo.Baz]\nmodule Foo =\n\n    /// Bar is just an \u0060int\u0060 and belongs to module [Foo]\n    type Bar = int\n\n    /// Baz contains a \u0060Foo.Bar\u0060 as its \u0060id\u0060\n    type Baz = { id: Bar }\n\n    /// This function operates on \u0060Baz\u0060 types.\n    let f (b:Baz) =\n        b.id * 42\n\n/// Referencing [Foo3] will not generate a link as there is no type with the name \u0060Foo3\u0060\nmodule Foo3 =\n\n    /// This is not the same type as \u0060Foo.Bar\u0060\n    type Bar = double\n\n    /// Using the simple name for [Bar] will fail to create a link because the name is duplicated in\n    /// [Foo.Bar] and in [Foo3.Bar]. In this case, using the full name works.\n    let f2 b =\n         b * 50\n\n(**\n### Markdown Comments: Excluding APIs from the docs\n\nIf you want to exclude modules or functions from the API docs you can use the \u0060[omit]\u0060 tag.\nIt needs to be set on a separate tripple-slashed line, but it could be either the first or the last:\n\n*)\n/// [omit]\n/// Some actual comment\nmodule Bar =\n   let a = 42\n(**\n\n\n## Building library documentation programmatically\n\nYou can build library documentation programatically using the functionality\nin the \u0060cref:T:FSharp.Formatting.ApiDocs.ApiDocs\u0060 type. To do this, load the assembly and open necessary namespaces:\n*)\n\n#r \u0022FSharp.Formatting.ApiDocs.dll\u0022\nopen FSharp.Formatting.ApiDocs\nopen System.IO\n\n(**\nFor example the \u0060cref:M:FSharp.Formatting.ApiDocs.ApiDocs.GenerateHtml\u0060 method:\n*)\n\nlet file = Path.Combine(root, \u0022bin/YourLibrary.dll\u0022)\nlet input = ApiDocInput.FromFile(file)\nApiDocs.GenerateHtml\n    ( [ input ],\n      output=Path.Combine(root, \u0022output\u0022),\n      collectionName=\u0022YourLibrary\u0022,\n      template=Path.Combine(root, \u0022templates\u0022, \u0022template.html\u0022),\n      substitutions=[])\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/codeformat.html","title":"Code formatting\n","content":"(**\n---\ncategory: Advanced\ncategoryindex: 3\nindex: 1\n---\n*)\n(*** condition: prepare ***)\n#nowarn \u0022211\u0022\n#I \u0022../src/FSharp.Formatting/bin/Release/netstandard2.1\u0022\n#r \u0022FSharp.Formatting.Common.dll\u0022\n#r \u0022FSharp.Formatting.Markdown.dll\u0022\n#r \u0022FSharp.Formatting.CodeFormat.dll\u0022\n#r \u0022FSharp.Formatting.Literate.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Formatting,{{package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Formatting,{{package-version}}\u0022\n#endif // IPYNB\n\n(**\n[![Binder](img/badge-binder.svg)](https://mybinder.org/v2/gh/fsprojects/fsharp.formatting/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](img/badge-script.svg)]({{root}}/{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](img/badge-notebook.svg)]({{root}}/{{fsdocs-source-basename}}.ipynb)\n\nCode formatting\n==============================\n\nThis page demonstrates how to use \u0060FSharp.Formatting.CodeFormat\u0060 to tokenize\nF# source code, obtain information about the source code (mainly tooltips\nfrom the type-checker) and how to turn the code into a nicely formatted HTML.\n\nFirst, we need to load the assembly and open necessary namespaces:\n*)\n\nopen FSharp.Formatting.CodeFormat\nopen System.Reflection\n\n(**\n\nStarting a background agent\n---------------------------\n\nThe \u0060FSharp.Formatting.CodeFormat\u0060 namespace contains \u0060cref:T:FSharp.Formatting.CodeFormat.CodeFormat\u0060 type which is the\nentry point. The static method \u0060cref:M:FSharp.Formatting.CodeFormat.CodeFormat.CreateAgent\u0060 starts a background worker that\ncan be called to format snippets repeatedly:\n*)\n\nlet formattingAgent = CodeFormat.CreateAgent()\n\n(**\nIf you want to process multiple snippets, it is a good idea to keep the\nformatting agent around if possible. The agent needs to load the F# compiler\n(which needs to load various files itself) and so this takes a long time.\n\nProcessing F# source\n--------------------\n\nThe formatting agent provides a \u0060cref:M:FSharp.Formatting.CodeFormat.CodeFormatAgent.ParseAndCheckSource\u0060 method (together with an asynchronous\nversion for use from F# and also a version that returns a .NET \u0060Task\u0060 for C#).\nTo call the method, we define a simple F# code as a string:\n*)\n\nlet source = \u0022\u0022\u0022\n    let hello () =\n      printfn \u0022Hello world\u0022\n  \u0022\u0022\u0022\nlet snippets, errors = formattingAgent.ParseAndCheckSource(\u0022C:\\\\snippet.fsx\u0022, source)\n\n(**\nWhen calling the method, you need to specify a file name and the actual content\nof the script file. The file does not have to physically exist. It is used by the\nF# compiler to resolve relative references (e.g. \u0060#r\u0060) and to automatically name\nthe module including all code in the file.\n\nYou can also specify additional parameters, such as \u0060*.dll\u0060 references, by passing\na third argument with compiler options (e.g. \u0060\u0022-r:Foo.dll -r:Bar.dll\u0022\u0060).\n\nThis operation might take some time, so it is a good idea to use an asynchronous\nvariant of the method. It returns two arrays - the first contains F# snippets\nin the source code and the second contains any errors reported by the compiler.\nA single source file can include multiple snippets using the same formatting tags\nas those used on [fssnip.net](http://www.fssnip.net) as documented in the\n[about page](http://www.fssnip.net/pages/About).\n\n\nWorking with returned tokens\n----------------------------\n\nEach returned snippet is essentially just a collection of lines and each line\nconsists of a sequence of tokens. The following snippet prints basic information\nabout the tokens of our sample snippet:\n*)\n\n// Get the first snippet and obtain list of lines\nlet (Snippet(title, lines)) = snippets |\u003E Seq.head\n\n// Iterate over all lines and all tokens on each line\nfor (Line(_, tokens)) in lines do\n  for token in tokens do\n    match token with\n    | TokenSpan.Token(kind, code, tip) -\u003E\n        printf \u0022%s\u0022 code\n        tip |\u003E Option.iter (fun spans -\u003E\n          printfn \u0022%A\u0022 spans)\n    | TokenSpan.Omitted _\n    | TokenSpan.Output _\n    | TokenSpan.Error _ -\u003E ()\n  printfn \u0022\u0022\n\n(**\nThe \u0060TokenSpan.Token\u0060 is the most important kind of token. It consists of a kind\n(identifier, keyword, etc.), the original F# code and tool tip information.\nThe tool tip is further formatted using a simple document format, but we simply\nprint the value using the F# pretty printing, so the result looks as follows:\n\n    let hello[Literal \u0022val hello : unit -\u003E unit\u0022; ...] () =\n      printfn[Literal \u0022val printfn : TextWriterFormat\u003C\u0027T\u003E -\u003E \u0027T\u0022; ...] \u0022Hello world\u0022\n\nThe \u0060Omitted\u0060 token is generated if you use the special \u0060(*[omit:...]*)\u0060 command.\nThe \u0060Output\u0060 token is generated if you use the \u0060// [fsi:...]\u0060 command to format\noutput returned by F# interactive. The \u0060Error\u0060 command wraps code that should be\nunderlined with a red squiggle if the code contains an error.\n\nGenerating HTML output\n----------------------\n\nFinally, the \u0060CodeFormat\u0060 type also includes a method \u0060cref:M:FSharp.Formatting.CodeFormat.CodeFormat.FormatHtml\u0060 that can be used\nto generate nice HTML output from an F# snippet. This is used, for example, on\n[F# Snippets](http://www.fssnip.net). The following example shows how to call it:\n*)\n\nlet prefix = \u0022fst\u0022\nlet html = CodeFormat.FormatHtml(snippets, prefix)\n\n// Print all snippets, in case there is more of them\nfor snip in html.Snippets do\n  printfn \u0022%s\u0022 snip.Content\n\n// Print HTML code that is generated for ToolTips\nprintfn \u0022%s\u0022 html.ToolTip\n\n(**\nIf the input contains multiple snippets separated using the \u0060//[snippet:...]\u0060 comment, e.g.:\n*)\n\n(**\n\u003Ctable class=\u0022pre\u0022\u003E\u003Ctr\u003E\u003Ctd class=\u0022lines\u0022\u003E\u003Cpre class=\u0022fssnip\u0022\u003E\n\u003Cspan class=\u0022l\u0022\u003E1: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E2: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E3: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E4: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E5: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E6: \u003C/span\u003E\n\u003Cspan class=\u0022l\u0022\u003E7: \u003C/span\u003E\n\u003C/pre\u003E\n\u003C/td\u003E\n\u003Ctd class=\u0022snippet\u0022\u003E\u003Cpre class=\u0022fssnip\u0022\u003E\u003Cspan class=\u0022c\u0022\u003E// [snippet: First sample]\u003C/span\u003E\n\u003Cspan class=\u0022i\u0022\u003Eprintf\u003C/span\u003E \u003Cspan class=\u0022s\u0022\u003E\u0022The answer is: %A\u0022\u003C/span\u003E \u003Cspan class=\u0022n\u0022\u003E42\u003C/span\u003E\n\u003Cspan class=\u0022c\u0022\u003E// [/snippet]\u003C/span\u003E\n\n\u003Cspan class=\u0022c\u0022\u003E// [snippet: Second sample]\u003C/span\u003E\n\u003Cspan class=\u0022i\u0022\u003Eprintf\u003C/span\u003E \u003Cspan class=\u0022s\u0022\u003E\u0022Hello world!\u0022\u003C/span\u003E\n\u003Cspan class=\u0022c\u0022\u003E// [/snippet]\u003C/span\u003E\n\u003C/pre\u003E\n\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/table\u003E\n*)\n\n(**\nthen the formatter returns multiple HTML blocks. However, the generated tool tips\nare shared by all snippets (to save space) and so they are returned separately.\n*)"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/commandline.html","title":"Command line\n","content":"---\ncategory: Documentation\ncategoryindex: 1\nindex: 1\n---\n# Command line\n\nTo use F# Formatting tools via the command line, you can use the \u0060fsdocs\u0060 dotnet tool.\n\n    [lang=text]\n    dotnet tool install FSharp.Formatting.CommandTool\n    dotnet fsdocs [command] [options]\n\n## The build command\n\nThis command processes a \u0060docs\u0060 directory and generates API docs for projects in the solution according to the\nrules of [API doc generation](apidocs.html). The input accepted is described in [content](content.html).\n\n    [lang=text]\n    fsdocs build\n\nThe command line options accepted are:\n\n| Command Line Option                 |  Description    |\n|:-----------------------|:-----------------------------------------|\n| \u0060--input\u0060     |   Input directory of content (default: \u0060docs\u0060) |\n| \u0060--projects\u0060     |   Project files to build API docs for outputs, defaults to all packable projects |\n| \u0060--output\u0060         |           Output Directory (default \u0027output\u0027 for \u0027build\u0027 and \u0027tmp/watch\u0027 for \u0027watch\u0027) |\n| \u0060--noapidocs\u0060       |           Disable generation of API docs |\n| \u0060--eval\u0060             |         Evaluate F# fragments in scripts |\n| \u0060--saveimages\u0060        |        Save images referenced in docs |\n| \u0060--nolinenumbers\u0060       |      Don\u0027t add line numbers, default is to add line number. |\n| \u0060--parameters\u0060            |    Additional substitution parameters for templates |\n| \u0060--nonpublic\u0060           |      The tool will also generate documentation for non-public members |\n| \u0060--nodefaultcontent\u0060      |    Do not copy default content styles, javascript or use default templates |\n| \u0060--clean\u0060                 |    Clean the output directory |\n| \u0060--help\u0060                  |    Display this help screen |\n| \u0060--version\u0060               |    Display version information |\n| \u0060--properties\u0060           |    Provide properties to dotnet msbuild, e.g. --properties Configuration=Release Version=3.4 |\n| \u0060--strict\u0060               |    Fail if docs are missing or can\u0027t be generated |\n\nThe following command line options are also accepted but it is instead recommended you use\nsettings in your .fsproj project files:\n\n| Command Line Option                 |  Description    |\n|:-----------------------|:-----------------------------------------|\n| \u0060--sourcefolder\u0060       |       Source folder at time of component build (\u0060\u003CFsDocsSourceFolder\u003E\u0060) |\n| \u0060--sourcerepo\u0060         |       Source repository for github links (\u0060\u003CFsDocsSourceRepository\u003E\u0060) |\n| \u0060--mdcomments\u0060           |     Assume comments in F# code are markdown (\u0060\u003CUsesMarkdownComments\u003E\u0060) |\n\nThe command will report on any \u0060.fsproj\u0060 files that it finds, telling you if it decides to skip a particular file and why.\n\nFor example, a project will be skipped if:\n\n* The project name contains \u0022.Tests\u0022 or \u0022test\u0022 (because it looks like a test project)\n\n* The project does not contain\n\u0060\u0060\u0060\n  \u003CGenerateDocumentationFile\u003Etrue\u003C/GenerateDocumentationFile\u003E\n\u0060\u0060\u0060\n\n## The watch command\n\nThis command does the same as \u0060fsdocs build\u0060 but in \u0022watch\u0022 mode, waiting for changes. Only the files in the input\ndirectory (e.g. \u0060docs\u0060) are watched. A browser will be launched automatically (unless \u0060--nolaunch\u0060 is specified).\n\nYou will need to ensure that the input directory exists, and contains at least \u0060index.md\u0060, otherwise the browser will\nreport an error (e.g. \u0022Problem loading...\u0022, \u0022Connection was reset\u0022).\n\n    [lang=text]\n    fsdocs watch\n\n Restarting may be necesssary on changes to project files. The same parameters are accepted, plus these:\n\n| Command Line Option                 |  Description    |\n|:-----------------------|:-----------------------------------------|\n| \u0060--noserver\u0060     |   Do not serve content when watching.  |\n| \u0060--nolaunch\u0060     |   Do not launch a browser window. |\n| \u0060--open\u0060     |   URL extension to launch http://localhost:\u003Cport\u003E/%s. |\n| \u0060--port\u0060     |   Port to serve content for http://localhost serving. |\n\n\n\n## Searchable docs\n\nWhen using the command-line tool a Lunr search index is automatically generated in \u0060index.json\u0060.\n\nA search box is included in the default template.  To add a search box\nto your own \u0060_template.html\u0060, include \u0060fsdocs-search.js\u0060, which is added to the \u0060content\u0060\nby default.\n\n    [lang=text]\n    ...\n    \u003Cdiv id=\u0022header\u0022\u003E\n      \u003Cdiv class=\u0022searchbox\u0022\u003E\n        \u003Clabel for=\u0022search-by\u0022\u003E\n          \u003Ci class=\u0022fas fa-search\u0022\u003E\u003C/i\u003E\n        \u003C/label\u003E\n        \u003Cinput data-search-input=\u0022\u0022 id=\u0022search-by\u0022 type=\u0022search\u0022 placeholder=\u0022Search...\u0022 /\u003E\n        \u003Cspan data-search-clear=\u0022\u0022\u003E\n          \u003Ci class=\u0022fas fa-times\u0022\u003E\u003C/i\u003E\n        \u003C/span\u003E\n      \u003C/div\u003E\n    \u003C/div\u003E\n    ...\n\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/styling.html","title":"Customization and Styling\n","content":"---\ncategory: Documentation\ncategoryindex: 1\nindex: 7\n---\n# Customization and Styling \n\nWhen using \u0060fsdocs\u0060, there are six levels of extra content development and styling.\n\n1. Don\u0027t do any styling or documentation customization and simply write content.  This is by far the simplest option to maintain.\n\n2. Add content such as an \u0060docs/index.md\u0060 to customize the front-page content for your generated docs.\n   You can also add content such as \u0060docs/reference/fslib.md\u0060 to give a bespoke landing page\n   for one of your namespaces, e.g. here assumed to be \u0060namespace FsLib\u0060.  This will override any\n   generated content.\n\n3. Customize via Styling Parameters\n\n4. Customize via CSS\n\n5. Customize via a new template\n\n6. Customize by generating your own site using your own code\n\nBy default \u0060fsdocs\u0060 does no styling customization and uses the following defaults. These are the settings used to build this site.\n\n* Uses the default template in [docs/_template.html](https://github.com/fsprojects/FSharp.Formatting/blob/master/docs/_template.html)\n\n* Uses the default styles in [docs/content/fsdocs-default.css](https://github.com/fsprojects/FSharp.Formatting/blob/master/docs/content/fsdocs-default.css).\n\n* Uses no custom styles in [docs/content/fsdocs-custom.css](https://github.com/fsprojects/FSharp.Formatting/blob/master/docs/content/fsdocs-default.css).\n\n* Uses no styling parameters except those extracted from the project files.\n\nFor your project, you don\u0027t need any of these files. However you can add them if you wish, though if\nyou adjust them there is no guarantee that your template will continue to work with future versions of F# Formatting.\n\n## Customizing via Styling Parameters\n\nThe following [content parameters](content.html) are particularly related to visual styling:\n\n|  Substitution name                  | Value (if not overriden by --parameters)                      | \n|:------------------------------------|:--------------------------------------------------------------|\n| \u0060fsdocs-authors\u0060              | \u0060\u003CAuthors\u003E\u0060                                                   |  \n| \u0060fsdocs-collection-name-link\u0060 | \u0060\u003CFsDocsCollectionNameLink\u003E\u0060        |  \n| \u0060fsdocs-license-link\u0060         | \u0060\u003CFsDocsLicenseLink\u003E\u0060  | \n| \u0060fsdocs-logo-src\u0060             | \u0060\u003CFsDocsLogoSource\u003E\u0060 |  \n| \u0060fsdocs-logo-link\u0060            | \u0060\u003CFsDocsLogoLink\u003E\u0060   |                \n| \u0060fsdocs-navbar-position\u0060      | \u0060\u003CFsDocsNavbarPosition\u003E\u0060 (\u0060fixed-left\u0060 or \u0060fixed-right\u0060)     |  \n| \u0060fsdocs-release-notes-link\u0060   | \u0060\u003CFsDocsReleaseNotesLink\u003E\u0060 else \u0060\u003CPackageProjectUrl\u003E/blob/master/RELEASE_NOTES.md\u0060  | \n| \u0060fsdocs-repository-link\u0060      | \u0060\u003CRepositoryUrl\u003E\u0060                                             | \n| \u0060fsdocs-theme\u0060                | \u0060\u003CFsDocsTheme\u003E\u0060, must currently be \u0060default\u0060    | \n\nThese basic entry-level styling parameters can be set in the project file or \u0060Directory.Build.props\u0060.\nFor example:\n\n\u0060\u0060\u0060xml\n    \u003C!-- Example ultra-simple styling and generation settings for FsDocs default template--\u003E\n    \u003CPackageLicenseUrl\u003Ehttps://github.com/foo/bar/blob/master/License.txt\u003C/PackageLicenseUrl\u003E\n    \u003CPackageProjectUrl\u003Ehttps://foo.github.io/bar/\u003C/PackageProjectUrl\u003E\n    \u003CRepositoryUrl\u003Ehttps://github.com/foo/bar/\u003C/RepositoryUrl\u003E\n    \u003CFsDocsLogoLink\u003Ehttps://fsharp.org\u003C/FsDocsLogoLink\u003E\n    \u003CFsDocsLicenseLink\u003Ehttps://github.com/foo/bar/blob/master/License.txt\u003C/FsDocsLicenseLink\u003E\n    \u003CFsDocsReleaseNotesLink\u003Ehttps://github.com/foo/bar/blob/master/release-notes.md\u003C/FsDocsReleaseNotesLink\u003E\n    \u003CFsDocsNavbarPosition\u003Efixed-left\u003C/FsDocsNavbarPosition\u003E\n    \u003CFsDocsWarnOnMissingDocs\u003Etrue\u003C/FsDocsWarnOnMissingDocs\u003E\n    \u003CFsDocsTheme\u003Edefault\u003C/FsDocsTheme\u003E\n\u0060\u0060\u0060\n\nAs an example, here is [a page with \u0060fsdocs-navbar-position\u0060 set to \u0060fixed-right\u0060](templates/leftside/styling.html).\n\n## Customizing via CSS\n\nYou can start styling by creating a file \u0060docs/content/fsdocs-custom.css\u0060 and adding entries to it.  It is loaded by\nthe standard template.  The CSS classes of generated content are:\n\n|  CSS class   | Corresponding Content|  \n|:------------------------------------|:--------------------------------------------------------------|\n| \u0060.fsdocs-tip\u0060              |   generated tooltips                                                  |  \n| \u0060.fsdocs-xmldoc\u0060      |  generated xmldoc sections  |\n| \u0060.fsdocs-member-list\u0060      |  generated member lists (tables)  |\n| \u0060.fsdocs-member-usage\u0060      |  usage in generated member lists  |\n| \u0060.fsdocs-member-tooltip\u0060      |  tooltips in generated member lists |\n| \u0060.fsdocs-member-xmldoc\u0060      |  documentation in generated member lists |\n| \u0060.fsdocs-entity-list\u0060      |  generated entity lists |\n| \u0060.fsdocs-entity-name\u0060      |  generated entity lists |\n| \u0060.fsdocs-entity-xmldoc\u0060      |  documentation in generated entity lists |\n| \u0060.fsdocs-exception-list\u0060      |  generated exception lists |\n| \u0060.fsdocs-summary\u0060      |  the \u0027summary\u0027 section of an XML doc |\n| \u0060.fsdocs-remarks\u0060      |  the \u0027remarks\u0027 section of an XML doc |\n| \u0060.fsdocs-params\u0060      |  the \u0027parameters\u0027 section of an XML doc |\n| \u0060.fsdocs-param\u0060      |  a \u0027parameter\u0027 section of an XML doc |\n| \u0060.fsdocs-param-name\u0060      |  a \u0027parameter\u0027 name of an XML doc |\n| \u0060.fsdocs-returns\u0060      |  the \u0027returns\u0027 section of an XML doc |\n| \u0060.fsdocs-example\u0060      |  the \u0027example\u0027 section of an XML doc |\n| \u0060.fsdocs-note\u0060      |  the \u0027notes\u0027 section of an XML doc |\n| \u0060.fsdocs-para\u0060      |  a paragraph of an XML doc |\n\nSome generated elements are given specific HTML ids:\n\n|  HTML Element Id    | Content|  \n|:------------------------------------|:--------------------------------------------------------------|\n| \u0060#fsdocs-content\u0060              |    The generated content |  \n| \u0060#fsdocs-searchbox \u0060      |   The search box |\n| \u0060#fsdocs-logo \u0060      |  The logo |\n| \u0060#fsdocs-nav \u0060      |  The navigation-bar |\n\nIf you write a new theme by CSS styling please contribute it back to FSharp.Formatting.\n\n## Customizing via a new template\n\nYou can do advanced styling by creating a new template.  Add a file \u0060docs/_template.html\u0060, likely starting\nwith the existing default template.\n\n\u003E NOTE: To enable hot reload during development with \u0060fsdocs watch\u0060 in a custom \u0060_template.html\u0060 file,\n\u003E make sure to add the single line \u0060{{fsdocs-watch-script}}\u0060  to your \u0060\u003Chead\u003E\u0060 tag.\n\n\u003E NOTE: There is no guarantee that your template will continue to work with future versions of F# Formatting.\n\u003E If you do develop a good template please consider contributing it back to F# Formatting.\n\n\n## Customizing by generating your own site using your own code\n\nThe \u0060FSharp.Formatting.ApiDocs\u0060 namespace includes a \u0060GenerateModel\u0060 that captures\nthe results of documentation preparation in \u0060ApiDocsModel\u0060 and allows you to \ngenerate your own site using your own code.\n\n\u003E NOTE: The ApiDocsModel API is undergoing change and improvement and there is no guarantee that your bespoke site generation will continue to work\n\u003E with future versions of F# Formatting.\n\n\u003E NOTE: The \u0060ApiDocsModel\u0060 currently includes some generated HTML with some specific style tags.\n\u003E In the long term these may be removed from the design of that component.\n\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/index.html","title":"F# Formatting: Documentation Tools for F# Code\n","content":"# F# Formatting: Documentation Tools for F# Code\n\nFSharp.Formatting is a set of libraries and tools for processing F# script files, markdown and for\ngenerating API documentation. F# Formatting package is used by this project and many other repositories.\n\nTo use the tool, install and use the [fsdocs](commandline.html) tool in a typical F# project with\nF# project files plus markdown and script content in the \u0060docs\u0060 directory:\n\n    dotnet tool install FSharp.Formatting.CommandTool\n    dotnet fsdocs build \n    dotnet fsdocs watch\n\nTo use the tool, explore the following topics:\n\n- [Authoring Content](content.html) - explains the content expected in the \u0060docs\u0060 directory for the \u0060fsdocs\u0060 tool.\n\n- [Using the Command line tool](commandline.html) - explains how to use the \u0060fsdocs\u0060 tool.\n\n- [Generating API documentation](apidocs.html) - how to generate HTML documentation\n  from \u0022XML comments\u0022 in your .NET libraries. The tool handles comments written in\n  Markdown too.\n\n- [Styling](styling.html) - explains some options for styling the output of \u0060fsdocs\u0060.\n\n- [Using literate programming](literate.html) - explains how to generate documentation\n  for your projects or to write nicely formatted F# blog posts. \n\n- [Embedding F# outputs in literate programming](evaluation.html) - provides more details on literate programming and\n  explains how to embed results of a literate script file in the generated output. This way,\n  you can easily format the results of running your code!\n\n## Using FSharp.Formatting as a library\n\nF# Formatting is also [available on NuGet](https://nuget.org/packages/FSharp.Formatting) as a set of libraries. \n\n- [Markdown parser](markdown.html) - explains the F# Markdown\n  processor that is available in this library with some basic examples of\n  document processing.\n\n- [F# code formatting](codeformat.html) - more details about the F# code\n  formatter and how to use it to obtain information about F# source files.\n\n## More information\n\nThe documentation for this library is generated automatically using the tools\nbuilt here. If you spot a typo, please submit a pull request! The source Markdown and F# script files are\navailable in the [docs folder on GitHub](https://github.com/fsprojects/FSharp.Formatting/tree/master/docs).\n\nThe project is hosted on [GitHub](https://github.com/fsprojects/FSharp.Formatting) where you can \n[report issues](https://github.com/fsprojects/FSharp.Formatting/issues), fork the project and submit pull requests.\nSee the  [License file](https://github.com/fsprojects/FSharp.Formatting/blob/master/LICENSE.md) in the GitHub repository.\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/evaluation.html","title":"Embedding script output\n","content":"(**\n---\ncategory: Documentation\ncategoryindex: 1\nindex: 6\n---\n*)\n(*** condition: prepare ***)\n#nowarn \u0022211\u0022\n#I \u0022../src/FSharp.Formatting/bin/Release/netstandard2.1\u0022\n#r \u0022FSharp.Formatting.Common.dll\u0022\n#r \u0022FSharp.Formatting.Markdown.dll\u0022\n#r \u0022FSharp.Formatting.CodeFormat.dll\u0022\n#r \u0022FSharp.Formatting.Literate.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Formatting,{{package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Formatting,{{package-version}}\u0022\n#endif // IPYNB\n\n(**\n[![Binder](img/badge-binder.svg)](https://mybinder.org/v2/gh/fsprojects/fsharp.formatting/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](img/badge-script.svg)]({{root}}/{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](img/badge-notebook.svg)]({{root}}/{{fsdocs-source-basename}}.ipynb)\n\n# Embedding script output\n\n\nFor literate F# scripts, you may embed the result of running the script as part of the literate output.\nThis is a feature of the functions discussed in [literate programming](literate.html) and\nit is implemented using the [F# Compiler service](http://fsharp.github.io/FSharp.Compiler.Service/).\n\n## Including Console Output\n\nTo include the Console output use \u0060\u0060include-output\u0060\u0060:\n\n    let test = 40 \u002B 2\n\n    printf \u0022A result is: %d\u0022 test\n    (*** include-output ***)\n\nThe script defines a variable \u0060test\u0060 and then prints it. The console output is included\nin the output.\n\nTo include the a formatted value use \u0060\u0060include-it\u0060\u0060:\n\n    [ 0 .. 99 ]\n\n    (*** include-it ***)\n\n\nTo include the meta output of F# Interactive processing such as type signatures use \u0060(*** include-fsi-output ***)\u0060:\n\n    let test = 40 \u002B 3\n\n    (*** include-fsi-output ***)\n\nTo include both console otuput and F# Interactive output blended use \u0060(*** include-fsi-merged-output ***)\u0060.\n\n    let test = 40 \u002B 4\n    (*** include-fsi-merged-output ***)\n\nYou can use the same commands with a named snippet:\n\n    (*** include-it: test ***)\n    (*** include-fsi-output: test ***)\n    (*** include-output: test ***)\n\nYou can use the \u0060include-value\u0060 command to format a specific value:\n\n    let value1 = [ 0 .. 50 ]\n    let value2 = [ 51 .. 100 ]\n    (*** include-value: value1 ***)\n\n## Using AddPrinter and AddHtmlPrinter\n\nYou can use \u0060fsi.AddPrinter\u0060, \u0060fsi.AddPrintTransformer\u0060 and \u0060fsi.AddHtmlPrinter\u0060 to extend the formatting of objects.\n\n## Emitting Raw Text\n\nTo emit raw text in F# literate scripts use the following:\n\n\t(**\n\t\t(*** raw ***)\n\t\tSome raw text.\n\t*)\n\nwhich would emit\n\n\u003Cpre\u003E\nSome raw text.\n\u003C/pre\u003E\n\ndirectly into the document.\n\nF# Formatting as a Library:  Specifying the Evaluator and Formatting\n---------------------------------------\n\nIf using F# Formatting as a library the embedding of F# output requires specifying an additional parameter to the\nparsing functions discussed in [literate programming documentation](literate.html).\nAssuming you have all the references in place, you can now create an instance of\n\u0060cref:T:FSharp.Formatting.Literate.Evaluation.FsiEvaluator\u0060 that represents a wrapper for F# interactive and pass it to all the\nfunctions that parse script files or process script files:\n\n*)\nopen FSharp.Formatting.Literate\nopen FSharp.Formatting.Literate.Evaluation\nopen FSharp.Formatting.Markdown\n\n// Sample literate content\nlet content = \u0022\u0022\u0022\nlet a = 10\n(*** include-value:a ***)\u0022\u0022\u0022\n\n// Create evaluator and parse script\nlet fsi = FsiEvaluator()\nlet doc = Literate.ParseScriptString(content, fsiEvaluator = fsi)\nLiterate.ToHtml(doc)\n(**\nWhen the \u0060fsiEvaluator\u0060 parameter is specified, the script is evaluated and so you\ncan use additional commands such as \u0060include-value\u0060. When the evaluator is *not* specified,\nit is not created automatically and so the functionality is not available (this way,\nyou won\u0027t accidentally run unexpected code!)\n\nIf you specify the \u0060fsiEvaluator\u0060 parameter, but don\u0027t want a specific snippet to be evaluated\n(because it might throw an exception, for example), you can use the \u0060(*** do-not-eval ***)\u0060\ncommand.\n\nThe constructor of \u0060cref:T:FSharp.Formatting.Literate.Evaluation.FsiEvaluator\u0060 takes command line parameters for \u0060fsi.exe\u0060 that can\nbe used to specify, for example, defined symbols and other attributes for F# Interactive.\n\nYou can also subscribe to the \u0060EvaluationFailed\u0060 event which is fired whenever the evaluation\nof an expression fails. You can use that to do tests that verify that all off the code in your\ndocumentation executes without errors.\n\nF# Formatting as a Library: Custom formatting functions\n---------------------------\n\nAs mentioned earlier, values are formatted using a simple \u0060\u0022%A\u0022\u0060 formatter by default.\nHowever, you can specify a formatting function that provides a nicer formatting for values\nof certain types. For example, let\u0027s say that we would want to format F# lists such as\n\u0060[1; 2; 3]\u0060 as HTML ordered lists \u0060\u003Col\u003E\u0060.\n\nThis can be done by calling \u0060cref:M:FSharp.Formatting.Literate.Evaluation.FsiEvaluator.RegisterTransformation\u0060 on the \u0060FsiEvaluator\u0060 instance:\n\n*)\n// Create evaluator \u0026 register simple formatter for lists\nlet fsiOl = FsiEvaluator()\nfsiOl.RegisterTransformation(fun (o, ty, _executionCount) -\u003E\n  // If the type of value is an F# list, format it nicely\n  if ty.IsGenericType \u0026\u0026 ty.GetGenericTypeDefinition() = typedefof\u003Clist\u003C_\u003E\u003E then\n    let items =\n      // Get items as objects and create paragraph for each item\n      [ for it in Seq.cast\u003Cobj\u003E (unbox o) -\u003E\n          [ Paragraph([Literal(it.ToString(), None)], None) ] ]\n    // Return option value (success) with ordered list\n    Some [ ListBlock(MarkdownListKind.Ordered, items, None) ]\n  else None)\n(**\n\nThe function is called with two arguments - \u0060o\u0060 is the value to be formatted and \u0060ty\u0060\nis the static type of the value (as inferred by the F# compiler). The sample checks\nthat the type of the value is a list (containing values of any type) and then it\ncasts all values in the list to \u0060obj\u0060 (for simplicity). Then we generate Markdown\nblocks representing an ordered list. This means that the code will work for both\nLaTeX and HTML formatting - but if you only need one, you can simply produce HTML and\nembed it in \u0060InlineHtmlBlock\u0060.\n\nTo use the new \u0060FsiEvaluator\u0060, we can use the same style as earlier. This time, we format\na simple list containing strings:\n*)\nlet listy = \u0022\u0022\u0022\n### Formatting demo\nlet test = [\u0022one\u0022;\u0022two\u0022;\u0022three\u0022]\n(*** include-value:test ***)\u0022\u0022\u0022\n\nlet docOl = Literate.ParseScriptString(listy, fsiEvaluator = fsiOl)\nLiterate.ToHtml(docOl)\n(**\nThe resulting HTML formatting of the document contains the snippet that defines \u0060test\u0060,\nfollowed by a nicely formatted ordered list:\n\n\u003Cblockquote\u003E\n\u003Ch3\u003EFormatting demo\u003C/h3\u003E\n\u003Ctable class=\u0022pre\u0022\u003E\u003Ctr\u003E\u003Ctd class=\u0022lines\u0022\u003E\u003Cpre class=\u0022fssnip\u0022\u003E\n\u003Cspan class=\u0022l\u0022\u003E1: \u003C/span\u003E\n\u003C/pre\u003E\n\u003C/td\u003E\n\u003Ctd class=\u0022snippet\u0022\u003E\u003Cpre class=\u0022fssnip\u0022\u003E\n\u003Cspan class=\u0022k\u0022\u003Elet\u003C/span\u003E \u003Cspanclass=\u0022i\u0022\u003Etest\u003C/span\u003E \u003Cspan class=\u0022o\u0022\u003E=\u003C/span\u003E [\u003Cspan class=\u0022s\u0022\u003E\u0026quot;\u003C/span\u003E\u003Cspan class=\u0022s\u0022\u003Eone\u003C/span\u003E\u003Cspan class=\u0022s\u0022\u003E\u0026quot;\u003C/span\u003E;\u003Cspan class=\u0022s\u0022\u003E\u0026quot;\u003C/span\u003E\u003Cspan class=\u0022s\u0022\u003Etwo\u003C/span\u003E\u003Cspan class=\u0022s\u0022\u003E\u0026quot;\u003C/span\u003E;\u003Cspan class=\u0022s\u0022\u003E\u0026quot;\u003C/span\u003E\u003Cspan class=\u0022s\u0022\u003Ethree\u003C/span\u003E\u003Cspan class=\u0022s\u0022\u003E\u0026quot;\u003C/span\u003E]\u003C/pre\u003E\n\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/table\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Cp\u003Eone\u003C/p\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003Etwo\u003C/p\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003Ethree\u003C/p\u003E\u003C/li\u003E\n\u003C/ol\u003E\n\u003C/blockquote\u003E\n\n*)"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/markdown.html","title":"Markdown parser\n","content":"(**\n---\ncategory: Advanced\ncategoryindex: 3\nindex: 2\n---\n*)\n(*** condition: prepare ***)\n#I \u0022../src/FSharp.Formatting/bin/Release/netstandard2.1\u0022\n#r \u0022FSharp.Formatting.Common.dll\u0022\n#r \u0022FSharp.Formatting.Markdown.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Formatting,{{package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Formatting,{{package-version}}\u0022\n#endif // IPYNB\n\n\n(**\n[![Binder](img/badge-binder.svg)](https://mybinder.org/v2/gh/fsprojects/fsharp.formatting/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](img/badge-script.svg)]({{root}}/{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](img/badge-notebook.svg)]({{root}}/{{fsdocs-source-basename}}.ipynb)\n\nMarkdown parser\n==============================\n\nThis page demonstrates how to use \u0060FSharp.Formatting.Markdown\u0060 to parse a Markdown\ndocument, process the obtained document representation and\nhow to turn the code into a nicely formatted HTML.\n\nFirst, we need to load the assembly and open necessary namespaces:\n*)\n\nopen FSharp.Formatting.Markdown\nopen FSharp.Formatting.Common\n\n\n(**\nParsing documents\n-----------------\n\nThe F# Markdown parser recognizes the standard [Markdown syntax](http://daringfireball.net/projects/markdown/)\nand it is not the aim of this tutorial to fully document it.\nThe following snippet creates a simple string containing a document\nwith several elements and then parses it using the \u0060cref:M:FSharp.Formatting.Markdown.Markdown.Parse\u0060 method:\n*)\n\nlet document = \u0022\u0022\u0022\n# F# Hello world\nHello world in [F#](http://fsharp.net) looks like this:\n\n    printfn \u0022Hello world!\u0022\n\nFor more see [fsharp.org][fsorg].\n\n  [fsorg]: http://fsharp.org \u0022The F# organization.\u0022 \u0022\u0022\u0022\n\nlet parsed = Markdown.Parse(document)\n\n(**\nThe sample document consists of a first-level heading (written using\none of the two alternative styles) followed by a paragraph with a\n_direct_ link, code snippet and one more paragraph that includes an\n_indirect_ link. The URLs of indirect links are defined by a separate\nblock as demonstrated on the last line (and they can then be easily used repeatedly\nfrom multiple places in the document).\n\nWorking with parsed documents\n-----------------------------\n\nThe F# Markdown processor does not turn the document directly into HTML.\nInstead, it builds a nice F# data structure that we can use to analyze,\ntransform and process the document. First of all the \u0060cref:P:FSharp.Formatting.Markdown.MarkdownDocument.DefinedLinks\u0060 property\nreturns all indirect link definitions:\n*)\n\nparsed.DefinedLinks\n// [fsi:val it : IDictionary\u003Cstring,(string * string option)\u003E =]\n// [fsi:  dict [(\u0022fsorg\u0022, (\u0022http://fsharp.org\u0022, Some \u0022The F# organization.\u0022))]]\n\n(**\nThe document content can be accessed using the \u0060cref:P:FSharp.Formatting.Markdown.MarkdownDocument.Paragraphs\u0060 property that returns\na sequence of paragraphs or other first-level elements (headings, quotes, code snippets, etc.).\nThe following snippet prints the heading of the document:\n*)\n\n// Iterate over all the paragraph elements\nfor par in parsed.Paragraphs do\n  match par with\n  | Heading(size=1; body=[Literal(text=text)]) -\u003E\n      // Recognize heading that has a simple content\n      // containing just a literal (no other formatting)\n      printfn \u0022%s\u0022 text\n  | _ -\u003E ()\n\n(**\nYou can find more detailed information about the document structure and how to process it\nin the book [F# Deep Dives](http://manning.com/petricek2/).\n\nProcessing the document recursively\n-----------------------------------\n\nThe library provides active patterns that can be used to easily process the Markdown\ndocument recursively. The example in this section shows how to extract all links from the\ndocument. To do that, we need to write two recursive functions. One that will process\nall paragraph-style elements and one that will process all inline formattings (inside\nparagraphs, headings etc.).\n\nTo avoid pattern matching on every single kind of span and every single kind of\nparagraph, we can use active patterns from the \u0060cref:T:FSharp.Formatting.Markdown.MarkdownPatterns\u0060 module. These can be use\nto recognize any paragraph or span that can contain child elements:\n\n*)\n\n/// Returns all links in a specified span node\nlet rec collectSpanLinks span = seq {\n  match span with\n  | DirectLink(link=url) -\u003E yield url\n  | IndirectLink(key=key) -\u003E yield fst (parsed.DefinedLinks.[key])\n  | MarkdownPatterns.SpanLeaf _ -\u003E ()\n  | MarkdownPatterns.SpanNode(_, spans) -\u003E\n      for s in spans do yield! collectSpanLinks s }\n\n/// Returns all links in the specified paragraph node\nlet rec collectParLinks par = seq {\n  match par with\n  | MarkdownPatterns.ParagraphLeaf _ -\u003E ()\n  | MarkdownPatterns.ParagraphNested(_, pars) -\u003E\n      for ps in pars do\n        for p in ps do yield! collectParLinks p\n  | MarkdownPatterns.ParagraphSpans(_, spans) -\u003E\n      for s in spans do yield! collectSpanLinks s }\n\n/// Collect links in the entire document\nSeq.collect collectParLinks parsed.Paragraphs\n// [fsi:val it : seq\u003Cstring\u003E =]\n// [fsi:  seq [\u0022http://fsharp.net\u0022; \u0022http://fsharp.org\u0022]]\n\n(**\nThe \u0060collectSpanLinks\u0060 function works on individual span elements that contain inline\nformatting (emphasis, strong) and also links. The \u0060DirectLink\u0060 node from \u0060cref:T:FSharp.Formatting.Markdown.MarkdownSpan\u0060 represents an inline\nlink like the one pointing to \u003Chttp://fsharp.net\u003E while \u0060IndirectLink\u0060 represents a\nlink that uses one of the link definitions. The function simply returns the URL associated\nwith the link.\n\nSome span nodes (like emphasis) can contain other formatting, so we need to recursively\nprocess children. This is done by matching against \u0060MarkdownPatterns.SpanNodes\u0060 which is an active\npattern that recognizes any node with children. The library also provides a _function_\nnamed \u0060MarkdownPatterns.SpanNode\u0060 that can be used to reconstruct the same node (when you want\nto transform document). This is similar to how the \u0060ExprShape\u0060 module for working with\nF# quotations works.\n\nThe function \u0060collectParLinks\u0060 processes paragraphs - a paragraph cannot directly be a\nlink so we just need to process all spans. This time, there are three options.\n\u0060ParagraphLeaf\u0060 represents a case where the paragraph does not contain any spans\n(a code block or, for example, a \u0060\u003Chr\u003E\u0060 line); the \u0060ParagraphNested\u0060 case is used for paragraphs\nthat contain other paragraphs (quotation) and \u0060ParagraphSpans\u0060 is used for all other\nparagraphs that contain normal text - here we call \u0060collectSpanLinks\u0060 on all nested spans.\n\nGenerating HTML output\n----------------------\n\nFinally, the \u0060cref:T:FSharp.Formatting.Markdown.Markdown\u0060 type also includes a method \u0060cref:M:FSharp.Formatting.Markdown.Markdown.ToHtml\u0060 that can be used\nto generate an HTML document from the Markdown input. The following example shows how to call it:\n*)\nlet html = Markdown.ToHtml(parsed)\n\n(**\nThere are also methods to generate \u0060.fsx\u0060, \u0060.ipynb\u0060, \u0060.md\u0060 and \u0060.tex\u0060.\n*)"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/content.html","title":"Creating Content\n","content":"(**\n---\ncategory: Documentation\ncategoryindex: 1\nindex: 3\n---\n*)\n(*** condition: prepare ***)\n#nowarn \u0022211\u0022\n#I \u0022../src/FSharp.Formatting/bin/Release/netstandard2.1\u0022\n#r \u0022FSharp.Formatting.Common.dll\u0022\n#r \u0022FSharp.Formatting.Markdown.dll\u0022\n#r \u0022FSharp.Formatting.CodeFormat.dll\u0022\n#r \u0022FSharp.Formatting.Literate.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Formatting,{{package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Formatting,{{package-version}}\u0022\n#endif // IPYNB\n\n\n(**\n[![Binder](img/badge-binder.svg)](https://mybinder.org/v2/gh/fsprojects/fsharp.formatting/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](img/badge-script.svg)]({{root}}/{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](img/badge-notebook.svg)]({{root}}/{{fsdocs-source-basename}}.ipynb)\n\nCreating Content\n===================================\n\nThe [\u0022fsdocs\u0022 tool](commandline.html) allows documentation for a site to be built\nfrom content in a \u0060docs\u0060 directory. The expected structure for a \u0060docs\u0060 directory is\n\n    [lang=text]\n    docs/**/*.md                  -- markdown with embedded code, converted to html and optionally tex/ipynb\n    docs/**/*.fsx                 -- fsx scripts converted to html and optionally tex/ipynb\n    docs/**/*                     -- other content, copied over\n    docs/**/_template.html        -- optional template, specifies the HTML template for this directory and its contents\n    docs/**/_template.tex         -- optionally indicates Latex files should be generated\n    docs/**/_template.ipynb       -- optionally indicates F# ipynb files should be generated\n    docs/**/_template.fsx         -- optionally indicates F# fsx files should be generated (even from markdown)\n    docs/reference/_template.html -- optionally specifies the default template for reference docs\n\nProcessing is by these two commands:\n\n    dotnet fsdocs build\n    dotnet fsdocs watch\n\nThe output goes in \u0060output/\u0060 by default.  Processing is recursive, making this a form of static site generation.\n\n## Literate Scripts and Markdown Content\n\nThe input directory may contain [literate scripts](literate.html) and markdown content.\n\n## Other Content\n\nContent that is not \u0060*.fsx\u0060 or \u0060*.md\u0060 is copied across.\n\n## Default Styling Content\n\nBy default additional content such as \u0060fsdocs-search.js\u0060, \u0060fsdocs-tips.js\u0060 and \u0060fsdocs-styles.css\u0060 are included in the\nthe \u0060content\u0060 directory of the output.  This can be suppressed with \u0060--nodefaultcontent\u0060 or by having your own\ncopy of this content in your \u0060content\u0060 directory.\n\n## Ignored Content\n\nAny file or directory beginning with \u0060.\u0060 is ignored.\n\n## Front matter\n\nEach content file can have optional frontmatter.  This determines the navigation bar title, categorization and ordering.\n\nFor markdown, the format is:\n\u0060\u0060\u0060\n---\ntitle: Some Title\ncategory: Some Category\ncategoryindex: 2\nindex: 3\n---\n\u0060\u0060\u0060\nFor F# scripts the frontmatter is in this form:\n\n    (**\n    ---\n    title: A Literate Script\n    category: Examples\n    categoryindex: 2\n    index: 1\n    ---\n    *)\n\nAll entries are optional.\nThe \u0060categoryindex\u0060 determines the ordering of categories.\nThe \u0060index\u0060 determines the ordering of within each category.\nThe \u0060title\u0060 is used in the navigation bar instead of any title inferred from the document.\n\n\n\n## Multi-language Content\n\nVersions of content in other languages should go in two-letter coded sub-directories, e.g.\n\n    docs/ja/...\n    docs/de/...\n\nThese will be elided from the main table-of-contents and search indexes.  (Currently no language-specific\ntable of contents is built, nor language-specific site search indexes).\n\n## Templates and Substitutions\n\nTemplates are used for HTML (\u0060_template.html\u0060), LaTeX (\u0060_template.tex\u0060), Notebooks (\u0060_template.ipynb)\u0060\nand F# script outputs (\u0060_template.fsx\u0060).\n\nThe following substitutions determine the primary (non-styling) content of your site.\nFor example \u0060{{fsdocs-content}}\u0060 is replaced with the generated content in each file.\n\nSubstitutions are applied when generating content from HTML templates, IPYNB templates, FSX templates.\nThey are also applied to content apart from Markdown inline code \u0060\u0060 \u0060...\u0060 \u0060\u0060, Markdown LaTeX and\ngenerated outputs.\n\nSee [Styling](styling.html) for information about template parameters and styling beyond the default template.\n\n|  Substitution name            | Generated content |\n|:------------------------------|:--------------------------------------------------------------|\n| \u0060root\u0060                        | \u0060\u003CPackageProjectUrl\u003E\u0060 else \u0060/\u0060 followed by \u0060fsdocs-collection-name\u0060    |\n| \u0060fsdocs-collection-name\u0060      | Name of .sln, single .fsproj or containing directory          |\n| \u0060fsdocs-content\u0060              | Main page content                                             |\n| \u0060fsdocs-list-of-namespaces\u0060   | HTML \u0060\u003Cli\u003E\u0060 list of namespaces with links                     |\n| \u0060fsdocs-list-of-documents\u0060    | HTML \u0060\u003Cli\u003E\u0060 list of documents with  titles and links          |\n| \u0060fsdocs-page-title\u0060           | First h1 heading in literate file. Generated for API docs     |\n| \u0060fsdocs-source\u0060               | Original literate script or markdown source                   |\n| \u0060fsdocs-source-filename\u0060      | Name of original input source, relative to the \u0060docs\u0060 root           |\n| \u0060fsdocs-source-basename\u0060      | Name of original input source, excluding its extensions, relative to the \u0060docs\u0060 root  |\n| \u0060fsdocs-tooltips\u0060             | Generated hidden div elements for tooltips                    |\n| \u0060fsdocs-watch-script\u0060         | The websocket script used in watch mode to trigger hot reload |\n\nThe following substitutions are extracted from your project files and may or may not be used by the default\ntemplate:\n\n|  Substitution name                   | Value                          |\n|:-------------------------------------|:-------------------------------|\n| \u0060fsdocs-copyright\u0060                   | \u0060\u003CCopyright\u003E\u0060                  |\n| \u0060fsdocs-package-project-url\u0060         | \u0060\u003CPackageProjectUrl\u003E\u0060          |\n| \u0060fsdocs-package-license-expression\u0060  | \u0060\u003CPackageLicenseExpression\u003E\u0060   |\n| \u0060fsdocs-package-tags\u0060                | \u0060\u003CPackageTags\u003E\u0060                |\n| \u0060fsdocs-package-version\u0060             | \u0060\u003CVersion\u003E\u0060                    |\n\nFor the \u0060fsdocs\u0060 tool, additional substitutions can be specified using \u0060--parameters\u0060.\n\n## Cross References to API Docs\n\nMarkdown content can contain cross-references to API Docs.  Use inline\nmarkdown code snippets of the special form \u0060\u0060 \u0060cref:T:MyNamespace.MyType\u0060 \u0060\u0060 where \u0060T:MyNamespace.MyType\u0060\nis a method, property or type xml doc sig reference, see [API Docs](apidocs.html).\nThis can include any cross-references resolved by fsdocs.\n\nThe generated API documentation includes buttons to copy the XML and Markdown forms of API doc references.\n\nFor example, within this project,\n\n- the text \u0060\u0060 \u0060cref:T:FSharp.Formatting.Markdown.MarkdownParagraph\u0060 \u0060\u0060 resolves to the link \u0060cref:T:FSharp.Formatting.Markdown.MarkdownParagraph\u0060\n\n- the text \u0060\u0060\u0060 \u0060cref:T:System.Console\u0060 \u0060\u0060\u0060 resolves to the link \u0060cref:T:System.Console\u0060\n\n- the text \u0060\u0060\u0060 \u0060cref:M:System.Console.WriteLine\u0060 \u0060\u0060\u0060 resolves to the link \u0060cref:M:System.Console.WriteLine\u0060\n\n- the text \u0060\u0060\u0060 \u0060cref:M:System.Console.WriteLine(System.String)\u0060 \u0060\u0060\u0060 resolves to the link \u0060cref:M:System.Console.WriteLine(System.String)\u0060\n\n- the text \u0060\u0060\u0060 \u0060\u0060cref:T:FSharp.Control.FSharpAsync\u00601\u0060\u0060 \u0060\u0060\u0060 resolves to the link \u0060\u0060cref:T:FSharp.Control.FSharpAsync\u00601\u0060\u0060\n\n- the text \u0060\u0060\u0060 \u0060cref:T:FSharp.Control.FSharpAsync\u0060 \u0060\u0060\u0060 resolves to the link \u0060cref:T:FSharp.Control.FSharpAsync\u0060\n\n- the text \u0060\u0060\u0060 \u0060\u0060cref:T:FSharp.Core.array\u00601\u0060\u0060 \u0060\u0060\u0060 resolves to the link \u0060\u0060cref:T:FSharp.Core.array\u00601\u0060\u0060\n\n- the text \u0060\u0060\u0060 \u0060cref:T:FSharp.Core.OptionModule\u0060 \u0060\u0060\u0060 resolves to the link \u0060cref:T:FSharp.Core.OptionModule\u0060\n\n- the text \u0060\u0060\u0060\u0060 \u0060\u0060\u0060cref:M:FSharp.Collections.ListModule.Append\u0060\u00601\u0060\u0060\u0060 \u0060\u0060\u0060\u0060 resolves to the link \u0060\u0060\u0060cref:M:FSharp.Collections.ListModule.Append\u0060\u00601\u0060\u0060\u0060\n\n\u003E NOTE: These cases act as tests - if the links above do not work, then that indicates a bug or a change in the\n\u003E external link. [Please report it](https://github.com/fsprojects/FSharp.Formatting/issues/new).\n\nDetermining xmldoc sig references is not simple.  The API doc generated pages come with\nbuttons to copy out the XmlDoc signature.\n\n## Generating HTML Output\n\nHTML is generated by default. You can also add a \u0060_template.html\u0060.  This should contain \u0060{{fsdocs-content}}\u0060,  \u0060{{fsdocs-tooltips}}\u0060\nand other placeholders. Substitutions are\napplied to this template.\nIf a file \u0060_template.html\u0060 exists then is used as the template for HTML generation for that directory and all sub-content.\n\n## Generating LaTeX output\n\nTo generate .tex output for each script and markdown file, add a \u0060_template.tex\u0060. Substitutions are\napplied to this template. The file is either empty of contains \u0060{{fsdocs-content}}\u0060 as the key where the body\nof the document is placed.\n\n## Generating iPython Notebook output\n\nTo generate .ipynb output for each script and markdown file, add a \u0060_template.ipynb\u0060, usually empty. Substitutions are\napplied to this template.\n\nTo add a \u0060mybinder\u0060 badge to your generated notebook, ensure you have a \u0060Dockerfile\u0060 and \u0060NuGet.config\u0060\nin your \u0060docs\u0060 directory and use text like this:\n\n    [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/fsprojects/FSharp.Formatting/gh-pages?filepath=literate.ipynb)\n\n## Generating Script outputs\n\nTo generate .fsx output for each script and markdown file, add a \u0060_template.fsx\u0060, usually empty. Substitutions are\napplied to this template. It is either empty of contains \u0060{{fsdocs-content}}\u0060 as the key where the body\nof the script is placed.\n\n*)"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/literate.html","title":"Literate Scripts\n","content":"(**\n---\ncategory: Documentation\ncategoryindex: 1\nindex: 3\n---\n*)\n(*** condition: prepare ***)\n#nowarn \u0022211\u0022\n#I \u0022../src/FSharp.Formatting/bin/Release/netstandard2.1\u0022\n#r \u0022FSharp.Formatting.Common.dll\u0022\n#r \u0022FSharp.Formatting.Markdown.dll\u0022\n#r \u0022FSharp.Formatting.CodeFormat.dll\u0022\n#r \u0022FSharp.Formatting.Literate.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Formatting,{{package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Formatting,{{package-version}}\u0022\n#endif // IPYNB\n\n\n(**\n[![Binder](img/badge-binder.svg)](https://mybinder.org/v2/gh/fsprojects/fsharp.formatting/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](img/badge-script.svg)]({{root}}/{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](img/badge-notebook.svg)]({{root}}/{{fsdocs-source-basename}}.ipynb)\n\nLiterate Scripts\n================\n\nThe following example shows most of the features that can be used in a literate\nF# script file with \u0060.fsx\u0060 extension. Most of the features should be quite self-explanatory:\n\n    (**\n    # First-level heading\n    Some more documentation using \u0060Markdown\u0060.\n    *)\n\n    let helloWorld() = printfn \u0022Hello world!\u0022\n\n    (**\n    ## Second-level heading\n    With some more documentation\n    *)\n\n    let numbers = [ 0 .. 99 ]\n    (*** include-value: numbers ***)\n\n    List.sum numbers\n    (*** include-it ***)\n\nThe F# script files is processed as follows:\n\n- A multi-line comment starting with \u0060(**\u0060 and ending with \u0060*)\u0060 is\n  turned into text and is processed using the F# Markdown processor\n  (which supports standard Markdown commands).\n\n- A single-line comment starting with \u0060(***\u0060 and ending with \u0060***)\u0060\n  is treated as a special command. The command can consist of\n  \u0060key\u0060, \u0060key: value\u0060 or \u0060key=value\u0060 pairs.\n\n|  Literate Command     | Description               |\n|:-----------------------|:----------------------------|\n|   \u0060(** ... *)\u0060       | Markdown  |\n|   \u0060(*** condition: prepare ***)\u0060       | Utilise a code snippet when analyzing for tooltips or executing for outputs |\n|   \u0060(*** condition: ipynb ***)\u0060       | Include a code snippet when making a .ipynb notebook  |\n|   \u0060(*** condition: tex ***)\u0060       | Include a code snippet when making a .tex output   |\n|   \u0060(*** condition: html ***)\u0060       | Include a code snippet when making HTML output   |\n|   \u0060(*** hide ***)\u0060       | Hide the subsequent snippet  |\n|   \u0060(*** raw ***)\u0060       | The subsequent code is treated as raw text |\n\n### Naming and including snippets\n\nThe command \u0060define\u0060 defines a named snippet (such as \u0060final-sample\u0060) and removes the command together with\nthe following F# code block from the main document. The snippet can then\nbe referred to in \u0027include\u0027. This makes it\npossible to write documents without the ordering requirements of the\nF# language.\n\n|  Literate Command     | Description               |\n|:-----------------------|:----------------------------|\n|   \u0060(*** define: snippet-name ***)\u0060       | Define a named snippet  |\n|   \u0060(*** include: snippet-name ***)\u0060                  | Include the code of the named snippet |\n\n### Naming and including outputs\n\n|  Literate Command     | Description               |\n|:-----------------------|:----------------------------|\n|   \u0060(*** define-output: output-name ***)\u0060             | Define a name for the outputs of the preceeding snippet |\n|   \u0060(*** include-output ***)\u0060                         | The console output of the preceeding snippet   |\n|   \u0060(*** include-output: output-name ***)\u0060            | The console output of the snippet (named with define-output)  |\n|   \u0060(*** include-fsi-output ***)\u0060                     | The F# Interactive output of the preceeding snippet   |\n|   \u0060(*** include-fsi-output: output-name ***)\u0060        | The F# Interactive output of the snippet (named with define-output)   |\n|   \u0060(*** include-fsi-merged-output ***)\u0060              | The merge of console output and F# Interactive output of the preceeding snippet   |\n|   \u0060(*** include-fsi-merged-output: output-name ***)\u0060 | The merge of console output and F# Interactive output of the snippet (named with define-output)  |\n|   \u0060(*** include-it ***)\u0060                             | The formatted result of the preceeding snippet |\n|   \u0060(*** include-it: output-name ***)    \u0060            | The formatted result of the snippet (named with define-output)   |\n|   \u0060(*** include-it-raw ***)\u0060                         | The unformatted result of the preceeding snippet |\n|   \u0060(*** include-it-raw: output-name ***)\u0060            | The unformatted result of the snippet (named with define-output)   |\n|   \u0060(*** include-value: value-name ***)\u0060              | The formatted value, an F# identifier name  |\n\n#### Hiding code snippets\n\nThe command \u0060hide\u0060 specifies that the following F# code block (until the next comment or command) should be\nomitted from the output.\n\n#### Evaluating and formatting results\n\nThe commands to evaluate and format results are explained in [evaluation](evaluation.html).\nYou must build your documentation with evaluation turned on using \u0060--eval\u0060.\n\n#### Substitutions\n\nSubstitutions are applied to content, see [content](content.html).\n\n### Literate Markdown Documents\n\nFor files with \u0060.md\u0060 extension, the entire file is a Markdown document, which may\ncontain F# code snippets (but also other code snippets). As usual, snippets are\nindented with four spaces. In addition, the snippets can be annotated with special\ncommands. Some of them are demonstrated in the following example:\n\n    [lang=text]\n    # First-level heading\n\n        [hide]\n        let print s = printfn \u0022%s\u0022 s\n\n    Some more documentation using \u0060Markdown\u0060.\n\n        [module=Hello]\n        let helloWorld() = print \u0022Hello world!\u0022\n\n    ## Second-level heading\n    With some more documentation\n\n        [lang=csharp]\n        Console.WriteLine(\u0022Hello world!\u0022);\n\nWhen processing the document, all F# snippets are copied to a separate file that\nis type-checked using the F# compiler (to obtain colours and tool tips).\nThe commands are written on the first line of the named snippet, wrapped in \u0060[...]\u0060:\n\n - The \u0060hide\u0060 command specifies that the F# snippet should not be included in the\n   final document. This can be used to include code that is needed to type-check\n   the code, but is not visible to the reader.\n\n - The \u0060module=Foo\u0060 command can be used to specify F# \u0060module\u0060 where the snippet\n   is placed. Use this command if you need multiple versions of the same snippet\n   or if you need to separate code from different snippets.\n\n - The \u0060lang=foo\u0060 command specifies the language of the named snippet. If the language\n   is other than \u0060fsharp\u0060, the snippet is copied to the output as \u0060\u003Cpre\u003E\u0060 HTML\n   tag without any processing.\n\n*)\n\n(**\n### LaTeX in Literate Scripts and Markdown Documents\n\nLiterate Scripts may contain LaTeX sections in Markdown using these forms:\n\n1. Single line latex starting with \u0060$$\u0060.\n\n2. A block delimited by \u0060\\begin{equation}...\\end{equation}\u0060 or \u0060\\begin{align}...\\end{align}\u0060.\n\n3. An indented paragraph starting with \u0060$$$\u0060.  This is F#-literate-specific and corresponds to\n   \u0060\\begin{equation}...\\end{equation}\u0060.\n\nFor example\n\n    [lang=text]\n    $$\\frac{x}{y}$$\n\n    \\begin{equation}\n       \\frac{d}{dx} \\left. \\left( x \\left( \\left. \\frac{d}{dy} x y \\; \\right|_{y=3} \\right) \\right) \\right|_{x=2}\n    \\end{equation}\n\nBecomes\n\n$$\\frac{x}{y}$$\n\n\\begin{equation}\n   \\frac{d}{dx} \\left. \\left( x \\left( \\left. \\frac{d}{dy} x y \\; \\right|_{y=3} \\right) \\right) \\right|_{x=2}\n\\end{equation}\n\nThe LaTeX will also be used in HTML and iPython notebook outputs.\n\n### Making literate scripts work for different outputs\n\nLiterate scripts and markdown can by turned into LaTex, Python Notebooks and F# scripts.\n\nA header may be needed to get the code to load, a typical example is this:\n\n    (*** condition: prepare ***)\n    #nowarn \u0022211\u0022\n    #I \u0022../src/FSharp.Formatting/bin/Release/netstandard2.1\u0022\n    #r \u0022FSharp.Formatting.Common.dll\u0022\n    #r \u0022FSharp.Formatting.Markdown.dll\u0022\n    #r \u0022FSharp.Formatting.CodeFormat.dll\u0022\n    #r \u0022FSharp.Formatting.Literate.dll\u0022\n    (*** condition: fsx ***)\n    #if FSX\n    #r \u0022nuget: FSharp.Formatting,{{package-version}}\u0022\n    #endif // FSX\n    (*** condition: ipynb ***)\n    #if IPYNB\n    #r \u0022nuget: FSharp.Formatting,{{package-version}}\u0022\n    #endif // IPYNB\n\n### Processing literate files programatically\n\nTo process file Use the two static methods to turn single documents into HTML\nas follows using functionality from the \u0060cref:T:FSharp.Formatting.Literate.Literate\u0060 type:\n*)\nopen System.IO\nopen FSharp.Formatting.Literate\n\nlet source = __SOURCE_DIRECTORY__\nlet template = Path.Combine(source, \u0022template.html\u0022)\n\nlet script = Path.Combine(source, \u0022../docs/script.fsx\u0022)\nLiterate.ConvertScriptFile(script, template)\n\nlet doc = Path.Combine(source, \u0022../docs/document.md\u0022)\nLiterate.ConvertMarkdownFile(doc, template)\n\n(**\n\nThe following sample also uses optional parameter \u0060parameters\u0060 to specify additional\nkeywords that will be replaced in the template file (this matches the \u0060template-project.html\u0060\nfile which is included as a sample in the package):\n*)\n\n// Load the template \u0026 specify project information\nlet projTemplate = source \u002B \u0022template-project.html\u0022\nlet projInfo =\n  [ \u0022fsdocs-authors\u0022, \u0022Tomas Petricek\u0022\n    \u0022fsdocs-source-link\u0022, \u0022https://github.com/fsprojects/FSharp.Formatting\u0022\n    \u0022fsdocs-collection-name\u0022, \u0022F# Formatting\u0022 ]\n\n(**\n\nThe methods used above (\u0060cref:M:FSharp.Formatting.Literate.Literate.ConvertScriptFile\u0060, \u0060cref:M:FSharp.Formatting.Literate.Literate.ConvertMarkdownFile\u0060)\nproduce HTML output by default, but they can be also used to produce LaTeX output. This is done\nby setting the output kind. The following\nexample shows how to call the methods to generate LaTeX documents:\n*)\nlet templateTex = Path.Combine(source, \u0022template.tex\u0022)\n\nlet scriptTex = Path.Combine(source, \u0022../docs/script.fsx\u0022)\nLiterate.ConvertScriptFile(scriptTex, templateTex, outputKind=OutputKind.Latex)\n\nlet docTex = Path.Combine(source, \u0022../docs/document.md\u0022)\nLiterate.ConvertMarkdownFile(docTex, templateTex, outputKind=OutputKind.Latex)\n\n(**\n\nThe methods used above (\u0060ConvertScriptFile\u0060, \u0060ConvertMarkdownFile\u0060)\ncan also produce iPython Notebook output. This is done\nby setting the named parameter \u0060format\u0060 to \u0060OutputKind.Pynb\u0060:\n*)\n\n// Process script file, Markdown document and a directory\nlet scriptPynb = Path.Combine(source, \u0022../docs/script.fsx\u0022)\nLiterate.ConvertScriptFile(scriptPynb, outputKind=OutputKind.Pynb)\n\nlet docPynb = Path.Combine(source, \u0022../docs/document.md\u0022)\nLiterate.ConvertMarkdownFile(docPynb, outputKind=OutputKind.Pynb)\n\n(**\n\nAll of the three methods discussed in the previous two sections take a number of optional\nparameters that can be used to tweak how the formatting works\n\n*)"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/templates/leftside/styling.html","title":"Example: Styling for Right-Side Navigation Bar\n","content":"---\n# Example: Right-Side NavBar\ncategory: Examples\ncategoryindex: 2\nindex: 4\n---\n\n# Example: Styling for Right-Side Navigation Bar\n\nThe sidebar can be moved to the right by using \n\n   \u0060\u003CFsDocsNavbarPosition\u003Efixed-right\u003CFsDocsNavbarPosition\u003E\u0060\n   \nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/sidebyside/sideextensions.html","title":"Markdown LaTeX","content":"---\ntitle: Markdown LaTeX\ncategory: Examples\ncategoryindex: 2\nindex: 3\n---\nExample: Using the Markdown Extensions for LaTeX\n===================\n\nTo use LaTex extension, you need add javascript\nlink to [MathJax](http://www.mathjax.org/) in\nyour template.\n\nTo use inline LaTex, eclose LaTex code with \u0060$\u0060:\n$ k_{n\u002B1} = n^2 \u002B k_n^2 - k_{n-1} $. Alternatively,\nyou can also use \u0060$$\u0060.\n\nTo use block LaTex, start a new parapgraph, with\nthe first line marked as \u0060$$$\u0060 (no close \u0060$$$\u0060):\n\n$$$\nA_{m,n} =\n \\begin{pmatrix}\n  a_{1,1} \u0026 a_{1,2} \u0026 \\cdots \u0026 a_{1,n} \\\\\n  a_{2,1} \u0026 a_{2,2} \u0026 \\cdots \u0026 a_{2,n} \\\\\n  \\vdots  \u0026 \\vdots  \u0026 \\ddots \u0026 \\vdots  \\\\\n  a_{m,1} \u0026 a_{m,2} \u0026 \\cdots \u0026 a_{m,n}\n \\end{pmatrix}\n\nUse LaTex escape rule:\n\n- Escape \\$ in inline mode: $ \\$ $, $ \\$var $\n- Other escapes: $ \\\u0026 \\% \\$ \\# \\_ \\{ \\} $\n- Using \u003C or \u003E: $ x \u003E 1 $, $ y \u003C 1 $, $ x \u003E= 1 $,\n  $ y \u003C= 1 $, $ x = 1 $\n- $ \u003Cp\u003Esomething\u003C/p\u003E $\n\n\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/sidebyside/sidemarkdown.html","title":"Markdown Content","content":"---\ntitle: Markdown Content\ncategory: Examples\ncategoryindex: 2\nindex: 2\n---\n# Example: Using Markdown Content\n\nThis file demonstrates how to write Markdown document with \nembedded F# snippets that can be transformed into nice HTML \nusing the \u0060literate.fsx\u0060 script from the [F# Formatting\npackage](http://fsprojects.github.io/FSharp.Formatting).\n\nIn this case, the document itself is a valid Markdown and \nyou can use standard Markdown features to format the text:\n\n - Here is an example of unordered list and...\n - Text formatting including **bold** and _emphasis_\n\nFor more information, see the [Markdown][md] reference.\n\n [md]: http://daringfireball.net/projects/markdown\n\n\n## Writing F# code\n\nIn standard Markdown, you can include code snippets by \nwriting a block indented by four spaces and the code \nsnippet will be turned into a \u0060\u003Cpre\u003E\u0060 element. If you do \nthe same using Literate F# tool, the code is turned into\na nicely formatted F# snippet:\n\n    /// The Hello World of functional languages!\n    let rec factorial x = \n      if x = 0 then 1 \n      else x * (factorial (x - 1))\n\n    let f10 = factorial 10\n\n\n## Hiding code\n\nIf you want to include some code in the source code, \nbut omit it from the output, you can use the \u0060hide\u0060 \ncommand. You can also use \u0060module=...\u0060 to specify that \nthe snippet should be placed in a separate module \n(e.g. to avoid duplicate definitions).\n\n    [hide, module=Hidden]\n    /// This is a hidden answer\n    let answer = 42\n\nThe value will be deffined in the F# code that is \nprocessed and so you can use it from other (visible) \ncode and get correct tool tips:\n\n    let answer = Hidden.answer\n\n## Including other snippets\n\nWhen writing literate programs as Markdown documents, \nyou can also include snippets in other languages. \nThese will not be colorized and processed as F# \ncode samples:\n\n    [lang=csharp]\n    Console.WriteLine(\u0022Hello world!\u0022);\n\nThis snippet is turned into a \u0060pre\u0060 element with the\n\u0060lang\u0060 attribute set to \u0060csharp\u0060.\n\n\u003Cbr /\u003E\n"},{"uri":"https://fsprojects.github.io/FSharp.Formatting/sidebyside/sidescript.html","title":"Literate Script","content":"(**\n---\ntitle: Literate Script\ncategory: Examples\ncategoryindex: 2\nindex: 1\n---\n# Example: Using Literate Script Content\n\nThis file demonstrates how to write literate F# script\nfiles (\u0060*.fsx\u0060) that can be transformed into nice HTML\nusing the \u0060literate.fsx\u0060 script from the [F# Formatting\npackage](http://fsprojects.github.io/FSharp.Formatting).\n\nAs you can see, a comment starting with double asterisk\nis treated as part of the document and is transformed \nusing Markdown, which means that you can use:\n\n - Unordered or ordered lists \n - Text formatting including **bold** and _emphasis_\n\nAnd numerous other [Markdown][md] features.\n\n [md]: http://daringfireball.net/projects/markdown\n\n## Writing F# code\n\nCode that is not inside comment will be formatted as\na sample snippet.\n*)\n\n/// The Hello World of functional languages!\nlet rec factorial x = \n  if x = 0 then 1 \n  else x * (factorial (x - 1))\n\nlet f10 = factorial 10\n\n(**\nHiding code\n-----------\n\nIf you want to include some code in the source code, \nbut omit it from the output, you can use the \u0060hide\u0060 \ncommand.\n*)\n\n(*** hide ***)\n/// This is a hidden answer\nlet hidden = 42\n\n(** \nThe value will be defined in the F# code and so you\ncan use it from other (visible) code and get correct\ntool tips:\n*)\n\nlet answer = hidden\n\n(** \n## Moving code around\n\nSometimes, it is useful to first explain some code that\nhas to be located at the end of the snippet (perhaps \nbecause it uses some definitions discussed in the middle).\nThis can be done using \u0060include\u0060 and \u0060define\u0060 commands.\n\nThe following snippet gets correct tool tips, even though\nit uses \u0060laterFunction\u0060:\n*)\n\n(*** include:later-bit ***)\n\n(**\nThen we can explain how \u0060laterFunction\u0060 is defined:\n*)\n\nlet laterFunction() = \n  \u0022Not very difficult, is it?\u0022\n\n(**\nThis example covers pretty much all features that are \ncurrently implemented in \u0060literate.fsx\u0060, but feel free \nto [fork the project on GitHub][fs] and add more \nfeatures or report bugs!\n\n  [fs]: https://github.com/fsprojects/FSharp.Formatting\n\n*)\n\n(*** define:later-bit ***)\nlet sample = \n  laterFunction()\n  |\u003E printfn \u0022Got: %s\u0022"}]